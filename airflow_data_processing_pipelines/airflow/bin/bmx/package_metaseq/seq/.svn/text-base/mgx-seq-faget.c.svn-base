/*
 *  mgx-fastxtrac.c
 *
 *  $Author: veyriejb $, $Date: 2012/02/21 14:12:36 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

 /**
 * \file mgx-fastxtrac.c
 * \brief This program extract sequences from a fasta file and can perform additional
 *        operations onto the extracted sequences (trimming, etc...)
 * \author Jean-Baptiste Veyrieras
 * \version 1.0
 * \date November 1 2011
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_list.h>
#include <gdl/gdl_hash.h>
#include <gdl/gdl_seq.h>

#include "mixgenomix.h"
#include "gzutil.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-fastxtrac";

static int help_flag         = 0;
static int verbose_flag      = 0;
static int seqid_flag        = 0;
static int custom_trim_flag  = 0;
static int revcomp_flag      = 0;
static int prefix_match_flag = 0;
static int first_match_only_flag = 0;
static int remove_flag = 0;

static gdl_string * INPUT      = NULL;  // name of the input Fasta file
static gdl_string * PFILE      = NULL;  // a list of sequence identifiers

static struct option long_options[] = {
/* These options set a flag. */
{ "help", no_argument, &help_flag, 1 },
{ "verbose", no_argument, &verbose_flag, 1 },
{ "brief", no_argument, &verbose_flag, 2 },
{ "seqid", no_argument, &seqid_flag, 1 },
{ "custom-trim", no_argument, &custom_trim_flag, 1 },
{ "revcomp", no_argument, &revcomp_flag, 1 },
{ "prefix-match", no_argument, &prefix_match_flag, 1 },
{ "first-match-only", no_argument, &first_match_only_flag, 1 },
{ "remove", no_argument, &remove_flag, 1 },
/* These options don't set a flag.
 We distinguish them by their indices. */
{ "input", required_argument, 0, 'i' },
{ "param-file", required_argument, 0, 'f' },
{ 0, 0, 0, 0 } };

static int parse_argument(int argc, char *argv[]) {
	int c;
	while (1) {
		/* getopt_long stores the option index here. */
		int option_index = 0;
		c = getopt_long(argc, argv, "i:f:", long_options, &option_index);
		/* Detect the end of the options. */
		if (c == -1)
			break;
		switch (c) {
		case 0:
			/* If this option set a flag, do nothing else now. */
			if (long_options[option_index].flag != 0)
				break;
			printf("option %s", long_options[option_index].name);
			if (optarg)
				printf(" with arg %s", optarg);
			printf("\n");
			break;
		case 'i':
			INPUT = gdl_string_clone(optarg);
			break;
		case 'f':
			PFILE = gdl_string_clone(optarg);
			break;
		case '?':
			GDL_ERROR_VAL("Unknown arguments", GDL_EINVAL, -1);
		default:
			GDL_ERROR_VAL("Bad arguments", GDL_EINVAL, -1);
		}
	}
}

/**
 * \fn static int check_argument(void)
 * \brief This function checks the main function arguments.
 * \return a success indicator
 */
static int check_argument(void) {
	if (INPUT == 0) {
		GDL_ERROR_VAL("No input fasta file provided", GDL_FAILURE, 1);
	}
	if (seqid_flag && !PFILE)
	{
		GDL_ERROR_VAL("No sequencie identifier file provided", GDL_FAILURE, 1);
	}
	if (custom_trim_flag && !PFILE)
	{
		GDL_ERROR_VAL("No trimming file provided", GDL_FAILURE, 1);
	}
	return GDL_SUCCESS;
}

/**
 * \fn static int help(void)
 * \brief This function prints the help
 */
static int help(void) {
	print_header(PROGRAM);
	printf("\n");
	printf("--help\tDisplay a brief help on program usage\n");
	printf("--verbose\tOutput message on standard output to see what the program is doing\n");
	printf("\n");
	printf("--seqid\tExtract the sequences which identifiers are provided via -f\n");
	printf("--remove\tWhen use with --seqid, remove sequences with identifiers provided as input instead\n");
	printf("--prefix-match\tAllow matching of provided identifiers with the prefix of the identifiers in the fasta file\n");
	printf("--first-match-only\tOnly report the first match\n");
	printf("--custom-trim\tTrim the sequences which identifiers and trimming boundaries (1-coordinate) are provided via -f\n");
	printf("--revcomp\tReverse complement the sequences (only works presently with --custom-trim)\n");
	printf("\n");
	printf("--input or -i\tAn input fasta file\n");
	printf("--param-file or -f\tA file providing the parameters(can be gzipped)\n");
	printf("\n");
}

void
output_trimmedseq (char seq_buffer[], const size_t seqlen, const long trim_table[], const gdl_string * seqid)
{
	if (seqlen)
	{
		size_t start = (trim_table[0]==-1) ? 0 : trim_table[0]-1;
		size_t end = (trim_table[1]==-1) ? seqlen-1 : trim_table[1]-1;
		if (start >= seqlen)
		{
			fprintf(stderr, "[mgx-fastxtract] bad left trim position %ld for sequence %s of size %ld (end=%ld)\n", start, seqid, seqlen, end);
		}
		else
		{
			if (end >= seqlen)
			{
				fprintf(stderr, "[mgx-fastxtract] bad left trim position %ld for sequence %s of size %ld (start=%ld)\n", end, seqid, seqlen, start);
			}
			else
			{
				size_t i,j=0;
                                if (revcomp_flag) 
                                {
                                    gdl_string * buf = gdl_string_alloc (end-start+1);
                                    strncpy(buf, seq_buffer+start, end-start+1);
                                    buf = gdl_seq_reverse_str (buf);
                                    strncpy(seq_buffer+start, buf, end-start+1);
                                    gdl_string_free (buf);
                                }
				for(i=start;i<=end;i++,j++)
				{
					if (j && j % 80 == 0) fputc('\n', stdout);
					fputc(seq_buffer[i], stdout);
				}
                                fputc('\n', stdout);
			}
		}
	}
}

int main(int argc, char *argv[])
{
	int status;
	parse_argument(argc, argv);
	if (help_flag) {
		exit(help());
	}

	status = check_argument();

	if (status == GDL_SUCCESS) {

		size_t i, j, n, maxlen;
		gdl_string * line = 0;
		mgxFILE * fh;

		if (seqid_flag)
		{
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] extract sequences\n");
			}
			size_t maxlen = 0, minlen = 1000000000;
			gdl_hashtable * seqid_table = gdl_hashtable_alloc (gdl_hash_default, 0);
			if (gdl_isfile (PFILE))
			{
				// Read the sequence identifiers
				if (verbose_flag)
				{
					fprintf(stderr, "[mgx-fastxtract] read the sequence identifiers to extract from\n         %s\n", PFILE);
				}
				fh = mgx_fileopen(PFILE, "r", mgx_getzipmode (PFILE));
				while(mgx_getline (&line, &n, fh)!=-1)
				{
					i=j=0;
					gdl_string * seqid = gdl_string_next_token (line, n, &i, &j); // do not allow for space in the identifier
					gdl_hashtable_add (seqid_table, seqid, seqid, 0);
					gdl_string_free (seqid);
					if (strlen(line) > maxlen) maxlen=strlen(line);
					if (strlen(line) < minlen) minlen=strlen(line);
					GDL_FREE (line);
					line=0;
				}
				mgx_fileclose (PFILE, fh);
			}
			else
			{
				// assume a single sequence id
				if (verbose_flag)
				{
					fprintf(stderr, "[mgx-fastxtract] look for a single sequence with id=%s\n", PFILE);
				}
				gdl_hashtable_add (seqid_table, PFILE, PFILE, 0);
				maxlen=strlen(PFILE);
			}
			// Read the sequence fasta file
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] extract the sequences\n");
			}
			size_t seq2extract = 0, nfound=0, prefix_found=0;
            int c, lc;
			fh = mgx_fileopen(INPUT, "r", mgx_getzipmode (INPUT));
			int newline = 1;
			while ((c=mgx_getc(fh))!=EOF)
			{
				if (c=='\n')
				{	
					newline = 1;
				}
				if (c=='>' && newline == 1)
				{
					newline = 0;
					seq2extract = prefix_found = 0;
					line = gdl_string_alloc(maxlen);
					c    = mgx_getc(fh);
					for(i=0;i<maxlen && (!isspace(c) && c!=EOF);i++,c=mgx_getc(fh))
					{
						line[i]=c;
                        line[i+1]='\0';
                        if (i >= minlen-1 && prefix_match_flag) 
                        {
                           if (gdl_hashtable_lookup(seqid_table, line))
                           {
                               prefix_found = 1;
                               break;
                           } 
                        }
					}
                    if ((remove_flag && (!prefix_found && gdl_hashtable_lookup(seqid_table, line)==0)) || (!remove_flag && (prefix_found || gdl_hashtable_lookup(seqid_table, line))))
					{
                        if (!remove_flag && first_match_only_flag) gdl_hashtable_remove (seqid_table, line);
						seq2extract = 1;
                        nfound++;
						fprintf(stdout, ">%s%c", line, c);
					}
					gdl_string_free(line);
				}
				else if (seq2extract)
				{
					fputc(c, stdout);
                    lc=c;
				}
			}
            if (lc != '\n') fputc('\n', stdout);
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] found %ld sequences\n", nfound);
			}
			mgx_fileclose (INPUT, fh);
			gdl_hashtable_free (seqid_table);
		}
		else if (custom_trim_flag)
		{
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] custom trimming\n");
			}
			// Read the sequence identifiers
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] read the custom trimming file from\n         %s\n", PFILE);
			}
			long * trim_args;
			size_t maxlen = 0;
			fh = mgx_fileopen(PFILE, "r", mgx_getzipmode (PFILE));
			gdl_hashtable * trim_table = gdl_hashtable_alloc (gdl_interface_long, 0);
			while(mgx_getline (&line, &n, fh)!=-1)
			{
				i=j=0;
				gdl_string * seqid      = gdl_string_next_token (line, n, &i, &j);
				gdl_string * left_trim  = gdl_string_next_token (line, n, &i, &j);
				gdl_string * right_trim = gdl_string_next_token (line, n, &i, &j);
				trim_args = GDL_MALLOC (long, 2);
				trim_args[0] = atol(left_trim);
				trim_args[1] = atol(right_trim);
				gdl_hashtable_add (trim_table, seqid, trim_args, 1);
				gdl_string_free (seqid);
				gdl_string_free (left_trim);
				gdl_string_free (right_trim);
				if (strlen(line) > maxlen) maxlen=strlen(line);
				GDL_FREE (line);
				line=0;
			}
			mgx_fileclose (PFILE, fh);
			// Read the sequence fasta file
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] trim the sequences\n");
			}
			char * seq_buffer;
			size_t seq2trim=0, nfound=0, seqlen=0, buffer_size=1000;
			int c;
			fh = mgx_fileopen(INPUT, "r", mgx_getzipmode (INPUT));
                        trim_args=0;
                        line=0;
			while ((c=mgx_getc(fh))!=EOF)
			{
				if (c=='>')
				{
					if (trim_args) {output_trimmedseq (seq_buffer, seqlen, trim_args, line);}
                                        trim_args = 0;
					seq2trim  = 0;
					seqlen    = 0;
					gdl_string_free(line);
					line = gdl_string_alloc(maxlen);
					c    = mgx_getc(fh);
					for(i=0;i<maxlen && (!isspace(c) && c!=EOF);i++,c=mgx_getc(fh))
					{
					   line[i]=c;
					}
					fprintf(stdout, ">%s", line);
                                        while(c!='\n')
                                        {
                                            fputc(c, stdout);
                                            c = mgx_getc(fh);
                                        }
					if ((trim_args=gdl_hashtable_lookup(trim_table, line))!=0)
					{
						seq2trim   = 1;
						seq_buffer = GDL_CALLOC (char, buffer_size);
						nfound++;
                                                fputc('\n', stdout);
					}
				}
				if (seq2trim && !isspace(c))
				{
					if (seqlen == buffer_size) // increase the buffer
					{
						char * tmp = GDL_CALLOC (char, 2*buffer_size);
						memcpy(tmp, seq_buffer, sizeof(char)*buffer_size);
						GDL_FREE (seq_buffer);
						seq_buffer=tmp;
						buffer_size*=2;
					}
					seq_buffer[seqlen++]=c;
				}
                                else if (!seq2trim)
                                {
                                    fputc(c, stdout);
                                }
			}
			// last sequence may-be
			if (trim_args) {output_trimmedseq (seq_buffer, seqlen, trim_args, line);}
			if (verbose_flag)
			{
				fprintf(stderr, "[mgx-fastxtract] trimmed %ld sequences\n", nfound);
			}
			mgx_fileclose (INPUT, fh);
			gdl_hashtable_free (trim_table);
		}
	}

	exit(0);
}
