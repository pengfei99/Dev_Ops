/*
 *  mgx-seq-drawfrag.c
 *
 *  $Author: vervieke $, $Date: 2013/06/24 17:25:37 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2013  DKL Team, bioMerieux, France.
 *
 */


#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>
#include <math.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_sort_uint.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_hash.h>
#include <gdl/gdl_list.h>

#include "mixgenomix.h"

#include "gzutil.h"
#include <ext/kseq/kseq.h>
KSEQ_INIT(gzFile, gzread);

#include "header.c"

static gdl_string * PROGRAM = "mgx-seq-drawfrag";

static int help_flag    = 0;
static int verbose_flag = 0;
static int atgc_flag = 0;

static gdl_string * INPUT = NULL;
static gdl_string * OUTPUT = NULL;
static gdl_string * TAXIDS = NULL;
static gdl_string * GI2TAXID = NULL;
static double NFRAG = 0;
static int MODE = 0;
static int SIZE = 0;
static int SEED = 0;
static int FRAGNAME = 0;
//static int shuffle_flag =0;
static int gz_flag = 0;
static int fastq_flag = 0;

static struct option long_options[] =
{
		/* These options set a flag. */
		{"help", no_argument,          &help_flag, 1},
		{"verbose", no_argument,       &verbose_flag, 1},
//		{"shuffle", no_argument,	&shuffle_flag, 1},
		{"compressed", no_argument,	&gz_flag, 1},
		{"fastq", no_argument,		&fastq_flag, 1},
		{"atgc", no_argument,       &atgc_flag, 1},
		/* These options don't set a flag.
         	We distinguish them by their indices. */
		{"input",   required_argument, 0, 'i'},
		{"output",   required_argument, 0, 'o'},
		{"nfrag",   required_argument, 0, 'n'},
		{"taxids", required_argument, 0, 't'},
		{"size",   required_argument, 0, 'k'},
		{"mode", required_argument, 0, 'm'},
		{"gi2taxid", required_argument,0, 'g'},
		{"seed", required_argument,0, 's'},
		{"fragname",required_argument,0, 'f'},
		{0, 0, 0, 0}
};


static int
parse_argument (int argc, char *argv[])
{
	int c;

	while (1)
	{

		/* getopt_long stores the option index here. */
		int option_index = 0;

		c = getopt_long (argc, argv, "g:i:k:m:n:o:s:t:f:",
				long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
			break;

		switch (c)
		{
		case 0:
			/* If this option set a flag, do nothing else now. */
			if (long_options[option_index].flag != 0)
				break;
			printf ("option %s", long_options[option_index].name);
			if (optarg)
				printf (" with arg %s", optarg);
			printf ("\n");
			break;
		case 'f':
			FRAGNAME = atoi (optarg);
			break;

		case 'g':
			GI2TAXID = gdl_string_clone (optarg);
			break;
		case 'i':
			INPUT = gdl_string_clone (optarg);
			break;
		case 'k':
			SIZE = atoi(optarg);
			break;
		case 'm':
			MODE = atoi (optarg);
			break;
		case 'n':
			NFRAG = atof(optarg);
			break;
		case 'o':
			OUTPUT = gdl_string_clone (optarg);
			break;
		case 's':
			SEED = atoi (optarg);
			break;
		case 't':
			TAXIDS = gdl_string_clone (optarg);
			break;
		case '?':
			GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
		default:
			GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
		}
	}
}


static int
check_argument (void)
{
	if (INPUT == 0)
	{
		GDL_ERROR_VAL ("No input file provided",
				GDL_FAILURE,
				1);
	}
	if (OUTPUT == 0)
	{
		GDL_ERROR_VAL ("No output file provided",
				GDL_FAILURE,
				1);
	}
	if (GI2TAXID == 0)
	{
		GDL_ERROR_VAL ("No gi2taxid output file provided",
				GDL_FAILURE,
				1);
	}
	if (MODE > 4)
	{
		GDL_ERROR_VAL ("Scaling option not provided",
				GDL_FAILURE,
				1);
	}
	if (SIZE == 0)
	{
		GDL_ERROR_VAL ("No fragment size provided",
				GDL_FAILURE,
				1);
	}
	return GDL_SUCCESS;
}


static int
help (void)
{
	print_header (PROGRAM);
	printf ("\n");
	printf ("--help\tDraw random fragments of size k in each sequence of input MultiFasta file, returning a new multiFasta file\n");
	printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
	printf ("\n");
	printf ("--gi2taxid or -g\t gi2taxids output file for all fragments\n");
	printf ("--input or -i\t input read file (fasta or fastq format)\n");
	printf ("--size or -k\t size of drawn fragments \n");
	printf ("--mode or -m\t 0: uniform among sequences (default) \n");
	printf ("		 \t 1: number of sequences in each taxon \n");
	printf ("		 \t 2: sequence length divided by total sequence length in each taxon \n");
	printf ("		 \t 3: coverage mode \n");
	printf ("		 \t 4:  stored in taxid file passed with --taxids/-t option\n");
	printf ("--nfrag or -n\t number of drawn fragments or possibly a coverage value (mode = 3) \n");
	printf ("--output or -o\t output file (fasta format)\n");
	printf ("--seed or -s\t random seed for repeatability (default: random seed based on time ) \n");
	printf ("--taxids or -t \t one-column (or two-column if mode==4) file containing taxa for each sequence \n");
	printf ("--frag_name or -f \t 0: incremental value for fragments name \n");
	printf ("                \t 1: fragments belonging to a taxon are labelled with taxId \n");
	printf ("                \t 2: fragments belonging to a taxon are labelled with taxId+cptr \n");
	printf("--compressed \t option for .gz output files\n");
	printf("--fastq \t option saving .fastq information in the output file\n");
	printf ("[--atgc \tdraw fragments made of ATCG only]\n");
}

int
main (int argc, char *argv[])
{

	int status;

	parse_argument (argc, argv);

	if (help_flag)
	{
		exit (help());
	}

	status = check_argument ();

	if (status == GDL_SUCCESS)
	{

		gzFile f;
		kseq_t *seq;
		FILE * stream, * stream_gi2taxid;
		FILE * taxids;
		gdl_string * line_read = 0;
		gdl_string * line_write = 0;
		gdl_string * key = 0 ;
		gdl_string * hash_itr = 0;
		gdl_string * tx_read = 0;
		gdl_string * tx_write = 0;
		gdl_string * nfrag_str = 0;		
		gdl_string * seq_id = 0;
		gdl_string * seq_s = 0;
		gdl_string * seq_ptr = 0;
		gdl_string * taxid = 0;
		gdl_list * taxids_list;
		gdl_hashtable *taxid_to_count, *taxid_to_seq;
		gdl_string * frag = 0;
		gdl_string * qual = 0;
		size_t i, j, k, l, random_pos,random_seq, weight_nfrag, n_read, n_write, value, to_write, atgc_only;
		size_t stop, cptr_pass, cptr_frag, to_draw_frags  = 0;
		int cptr_seq = 0;
		int cptr = 0;
		int min_nfrag = 99999; //not sure of the max value
		unsigned int *count_tx, *count_seq;
		gdl_string * current_seq = 0;
		//tables
		gdl_string ** sequences_table, ** seqid_table, ** taxid_table = 0;
		int * nfrags_table,* to_draw_table = 0;

		// initialisation de rand
		if(SEED == 0) srand(time(NULL));
		else srand(SEED);

		//if MODE != 3, convert NFRAG into integer
		if(MODE < 3)  NFRAG = (int) NFRAG;

		// verbose //
		if(verbose_flag && MODE == 0){
			printf("**** Draw %d random fragments of size %d uniformally among sequences ****\n",NFRAG ,SIZE);
		}
		if(verbose_flag && TAXIDS && MODE == 1){
			printf("**** Draw %d random fragments of size %d in each taxon, according to sequences number into the taxon ****\n",NFRAG ,SIZE);
		}
		if(verbose_flag && TAXIDS && MODE == 2){
			printf("**** Draw %f random fragments of size %d in each taxon, according to sequences length into the taxon ****\n",NFRAG ,SIZE);
		}
		if(verbose_flag && TAXIDS && MODE == 3){
			printf("**** Draw random fragments of size %d according to sequence length, with mean coverage %f ****\n" ,SIZE, NFRAG);
		}
		if(verbose_flag && TAXIDS && MODE == 4){
			printf("**** Draw random fragments of size %d according to pre-defined value ****\n" ,SIZE);
		}


		//-------------------------//
		// initialize objects data //
		//-------------------------//
		//init already used taxids list
		taxids_list  = gdl_list_alloc (gdl_list_default);
		//init number of sequences /taxid hashtable
		taxid_to_count = gdl_hashtable_alloc (gdl_interface_uint, 0);
		//init total sequences length /taxid hashtable (only for MODE = 2)
		if(MODE == 2){
			taxid_to_seq = gdl_hashtable_alloc (gdl_interface_uint, 0);
		}
		//--------------------//
		// open output files //
		//-------------------//
		if(!gz_flag)
			stream = gdl_fileopen (OUTPUT, "w");
		stream_gi2taxid = gdl_fileopen (GI2TAXID, "w");
		//----------------------------------------//
		// extract number of sequences per taxid //
		//--------------------------------------//
		if(MODE < 4){
			//open taxids/sequence file
			taxids = gdl_fileopen (TAXIDS, "r");
			// initialize fasta file
			if(MODE == 2){
				f = gzopen(INPUT, "r");
				seq = kseq_init(f);
				cptr_seq = 0;
			}
			// process taxid file
			while(gdl_getline (&line_read, &n_read, taxids)!=-1)
			{
				i=j=0;
				tx_read = gdl_string_next_token (line_read, n_read, &i, &j);
				// store taxid in a list
				gdl_list_push_back (taxids_list, tx_read, 0);
				//read corresponding sequence
				if(MODE == 2){
					kseq_read(seq);
				}
				// add entry to taxid_to_count if necessary
				if((count_tx=(unsigned int*) gdl_hashtable_lookup (taxid_to_count, tx_read)) == 0){
					//new key
					count_tx = GDL_CALLOC (unsigned int, 1);
					*count_tx = (unsigned int) (1);
					gdl_hashtable_add(taxid_to_count, tx_read, count_tx, 1);
					if(MODE == 2 && (count_seq = (unsigned int*) gdl_hashtable_lookup (taxid_to_seq, tx_read)) == 0){
						count_seq = GDL_CALLOC (unsigned int, 1);
						*count_seq = (unsigned int) (seq->seq.l);
						gdl_hashtable_add(taxid_to_seq, tx_read, count_seq, seq->seq.l);
					}
				}
				else{
					// get sequences number for each taxon
					(*count_tx)++;
					if(MODE == 2){ // get sequences total length for each taxon
						count_seq = (unsigned int*) gdl_hashtable_lookup (taxid_to_seq, tx_read);
						(*count_seq) = (*count_seq) + seq->seq.l;
					}
				}
				//cptr on seq
				cptr_seq++;
			}
			// free objects
			gdl_string_free(tx_read);
			gdl_string_free (line_read);
			// close output files
			gdl_fileclose (TAXIDS, taxids); 
			if(MODE == 2){
				kseq_destroy(seq);
				gzclose(f);
			}

			if(verbose_flag){
				int * val = 0;
				gdl_hashtable_itr * hash_itr_debug = gdl_hashtable_iterator(taxid_to_count);
				do {
					val = (int *) gdl_hashtable_iterator_value(hash_itr_debug);
					printf(" - taxid = %s, number of sequences found = %d\n", gdl_hashtable_iterator_key(hash_itr_debug), *val);
				} while (gdl_hashtable_iterator_next(hash_itr_debug));
			}
		}

		//-----------------------//
		// process each sequence //
		//----------------------//
		// open input files
		f = gzopen(INPUT, "r");
		seq = kseq_init(f);
		taxids = gdl_fileopen (TAXIDS, "r");
		// process each sequence
		while(gdl_getline (&line_write, &n_write, taxids)!=-1)
		{
			// read taxid
			i=j=0;
			tx_write = gdl_string_next_token (line_write, n_write, &i, &j);
			//read corresponding sequence
			kseq_read(seq);
			// get number of fragments to draw
			if(MODE == 4){
				nfrag_str = gdl_string_next_token (line_write, n_write, &i, &j);
				weight_nfrag = atoi(nfrag_str);
				if(verbose_flag)
					printf("sequence %s : taxid = %s, number of fragments to draw = %d\n", seq->name.s, tx_write, weight_nfrag);
			}else{
				// find count corresponding to taxids line
				count_tx = gdl_hashtable_lookup (taxid_to_count, tx_write);
				// define number of fragments
				if(MODE == 0) weight_nfrag = NFRAG ;
				if(MODE == 1) weight_nfrag = NFRAG / *count_tx ;
				if(MODE == 2) {
					count_seq = gdl_hashtable_lookup (taxid_to_seq, tx_write);
					weight_nfrag = NFRAG*seq->seq.l / *count_seq;
				}
				if(MODE == 3) {
					weight_nfrag = NFRAG*seq->seq.l / SIZE;
				}
				if(verbose_flag)
					printf("sequence %s : taxid = %s, number of fragments to draw = %d (count_tx = %d)\n", seq->name.s, tx_write, weight_nfrag,  *count_tx);
			}
			// sanity check : if sequence shorter than fragment length, skip
			if(seq->seq.l <= SIZE){
				weight_nfrag = 0;
				printf("WARNING : skipping sequence %s : length = %d\n", seq->name.s, seq->seq.l);
                        }
			// draw fragments
			if (FRAGNAME==2) {
				cptr=0;
			}
			for(k = 0; k < weight_nfrag; k++){
				to_write = 0;
				while(to_write == 0){
					atgc_only = 1;
					// generate random position on the sequence
					random_pos = rand()%(seq->seq.l-SIZE);
					// write sub-seq into frag
					frag = gdl_string_alloc(SIZE);	
					if(fastq_flag) qual = gdl_string_alloc(SIZE);
					for(i = random_pos; i <= (random_pos + SIZE); i++){
						switch(toupper(seq->seq.s[i])){
							case 'A' : break;
							case 'T' : break;
							case 'G' : break;
							case 'C' : break;
							default :
								atgc_only = 0;
								break;
						}
						frag[i-random_pos] = toupper(seq->seq.s[i]);
						if(fastq_flag) qual[i-random_pos] = seq->qual.s[i];
					}
					if(atgc_only == 1){
						to_write = 1;
					}else{
						if(atgc_flag){
							to_write = 0;
						}else{
							to_write = 1;
							if(verbose_flag)
								printf("WARNING : sequence %s : drawing fragment (out of %lu required ones) containing IUPAC character(s)\n", seq->name.s, weight_nfrag);
						}
					}
				}
				// write fragment
				cptr++;
				//header according to fast*
				if(fastq_flag)
				{
					if(!gz_flag){
						fprintf (stream,"@");
					}else{
							printf ("@");
						}
				}else{
					if(!gz_flag){
						fprintf (stream,">");
					}else{
						printf (">");
					}
				}
				//seqname
				if(FRAGNAME==1)
				{
					if(!gz_flag){
						fprintf (stream,"%s",tx_write);
					}else{
						printf("%s",tx_write);
					}
				}else{
					if(FRAGNAME==2) {
						if(!gz_flag){
							fprintf (stream,"%s_%d",tx_write,cptr);
						}else{
							printf("%s_%d",tx_write,cptr);
						}
					} else {
						if(!gz_flag){
							fprintf (stream,"%d",cptr);
						}else{
							printf("%d",cptr);
							}
					}
				}
				//comment file
				if(fastq_flag & seq->comment.l)
				{
					if(!gz_flag){
						fprintf (stream,"%s",seq->comment.s);
					}else{
						printf("%s",seq->comment.s);
					}
				}
				//end of header
				if(!gz_flag){
					fprintf (stream,"\n");
				}else{
					printf ("\n");
				}
				//write gi2taxid information
				fprintf (stream_gi2taxid,"%s\t%s\n",seq->name.s,tx_write);
				//write characters in fragment
				for(j = 0; j < SIZE; j++)
				{
					if (j && j % 80 == 0)
					{
						if(!gz_flag){
							fprintf (stream,"\n");
						}else{
							printf ("\n");
						}
					}
					if(!gz_flag){
						fputc (frag[j], stream);
					}else{
						printf("%c",frag[j]);
					}
				}
				if(!gz_flag){
					fprintf (stream,"\n");
				}else{
					printf("\n");
				}
				//additional field in fastq
				if(fastq_flag)
				{
					if(!gz_flag){
						fprintf (stream,"+\n");
					}else{
						printf("+\n");
					}
				}
				//additional quality field in fastq
				if(fastq_flag)
				{
					for(j = 0; j < SIZE; j++)
					{
						if (j && j % 80 == 0)
						{
							if(!gz_flag){
								fprintf (stream,"\n");
							}else{
								printf ("\n");
							}
						}
						if(!gz_flag){
							fputc (qual[j], stream);
						}else{
							printf("%c",qual[j]);
						}
					}
					if(!gz_flag){
						fprintf (stream,"\n");
					}else{
						printf ("\n");
					}
				}
				// fee fragment
				gdl_string_free(frag);
				frag = 0;
				if(fastq_flag){
					gdl_string_free(qual);
					qual = 0;
				}
			}
		}
		//free
		gdl_string_free(tx_write);
		//free line
		gdl_string_free (line_write);
		// close input file
		kseq_destroy(seq);
		gzclose(f);
		gdl_fileclose (TAXIDS, taxids);
		//free hashtables
		gdl_hashtable_free(taxid_to_count);
		if(MODE == 2) gdl_hashtable_free(taxid_to_seq);
		//free lists
		gdl_list_free(taxids_list);
		//close files
		if(!gz_flag)
		{
			gdl_fileclose(OUTPUT, stream);
		}
		else
		{
			//    gzclose(stream);
		}
		gdl_fileclose(GI2TAXID, stream_gi2taxid );
		//free args
		gdl_string_free(INPUT);
		gdl_string_free(OUTPUT);
		gdl_string_free(TAXIDS);
	}
	exit(0);
}


