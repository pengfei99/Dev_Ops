/*
 *  header.c
 *
 *  $Author: mahep $, $Date: 2011/09/06 17:25:37 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */
#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_igdb_genome.h>

#include "mixgenomix.h"

#include "kmer.h"

#include "header.c"


static gdl_string * PROGRAM = "mgx-kmerdb";

static int help_flag    = 0;
static int verbose_flag = 0;
static int debug_flag = 0;

static gdl_string * INPUT  = NULL;
static gdl_string * OUTPUT = NULL;

static struct option long_options[] =
{
		/* These options set a flag. */
		{"help", no_argument,          &help_flag, 1},
		{"verbose", no_argument,       &verbose_flag, 1},
		{"debug", no_argument,         &debug_flag, 1},
		{"brief",   no_argument,       &verbose_flag, 0},
		/* These options don't set a flag.
         We distinguish them by their indices. */
		{"output",   required_argument, 0, 'o'},
		{"input",   required_argument, 0, 'i'},
		{0, 0, 0, 0}
};

static int
parse_argument (int argc, char *argv[])
{
	int c;

	while (1)
	{

		/* getopt_long stores the option index here. */
		int option_index = 0;

		c = getopt_long (argc, argv, "i:o:",
				long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
			break;

		switch (c)
		{
		case 0:
			/* If this option set a flag, do nothing else now. */
			if (long_options[option_index].flag != 0)
				break;
			printf ("option %s", long_options[option_index].name);
			if (optarg)
				printf (" with arg %s", optarg);
			printf ("\n");
			break;
		case 'i':
			INPUT = gdl_string_clone (optarg);
			break;
		case 'o':
			OUTPUT = gdl_string_clone (optarg);
			break;
		case '?':
			GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
		default:
			GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
		}
	}

}

static int
check_argument (void)
{

	if (INPUT == 0)
	{
		GDL_ERROR_VAL ("No input file provided",
				GDL_FAILURE,
				1);
	}
	if (OUTPUT == 0)
	{
		GDL_ERROR_VAL ("No output directory provided",
				GDL_FAILURE,
				1);
	}

	return GDL_SUCCESS;
}

static int
help (void)
{
	print_header (PROGRAM);
	printf ("\n");
	printf ("--help\tDisplay a brief help on program usage\n");
	printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
	printf ("--debug\tMore detailed output message (e.g, for debugging purposes)\n");
	printf ("\n");
	printf ("--input or -i\t input file (three column file with {gi taxid kmertab.txt} )\n");
	printf ("--output or -o\t output directory \n");
}

int getNumberOfLines(gdl_string * fileName)
{
	FILE * stream;
	stream = gdl_fileopen (fileName, "r");
	gdl_string    * line = 0;
	size_t n = 0;
	size_t nlines = 0;
   	while(gdl_getline (&line, &n, stream)!=-1)
    	{
			nlines ++;
	    }
	gdl_fileclose (fileName, stream);
	return(nlines);
}

int
main (int argc, char *argv[])
{

	int status;

	parse_argument (argc, argv);

	if (help_flag)
	{
		exit (help());
	}

	if(debug_flag)
	{
		verbose_flag = 1;
	}

	status = check_argument ();


	if (status == GDL_SUCCESS)
	{


	}

	exit (0);
}
