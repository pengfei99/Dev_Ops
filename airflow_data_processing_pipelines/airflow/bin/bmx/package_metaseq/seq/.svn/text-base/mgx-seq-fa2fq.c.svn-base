/*
 *  mgx-fasta2fastq.c
 *
 *  $Author: lepriolc $, $Date: 2012/02/07 17:19:34 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

 /**
 * \file mgx-fasta2fastq.c
 * \brief This program converts a fastq file into a fasta file
 * \author Jean-Baptiste Veyrieras
 * \version 1.0
 * \date November 1 2011
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_list.h>
#include <gdl/gdl_hash.h>

// mixgenomix header
#include <utils/gzutil.h>
#include <ext/kseq/kseq.h>
#include "mixgenomix.h"
KSEQ_INIT(gzFile, gzread);

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-fasta2fastq";

static int help_flag = 0;
static int verbose_flag = 0;

static gdl_string * INPUT     = NULL;  // name of the input Fastq file
static int qual_value = 0; // quality value

static struct option long_options[] = {
/* These options set a flag. */
{ "help", no_argument, &help_flag, 1 },
{ "verbose", no_argument, &verbose_flag, 1 },
{ "brief", no_argument, &verbose_flag, 2 },
/* These options don't set a flag.
 We distinguish them by their indices. */
{ "input", required_argument, 0, 'i' },
{ "qual", required_argument, 0, 'q' },
{ 0, 0, 0, 0 } };

static int parse_argument(int argc, char *argv[]) {
	int c;
	while (1) {
		/* getopt_long stores the option index here. */
		int option_index = 0;
		c = getopt_long(argc, argv, "i:q:", long_options, &option_index);
		/* Detect the end of the options. */
		if (c == -1)
			break;
		switch (c) {
		case 0:
			/* If this option set a flag, do nothing else now. */
			if (long_options[option_index].flag != 0)
				break;
			printf("option %s", long_options[option_index].name);
			if (optarg)
				printf(" with arg %s", optarg);
			printf("\n");
			break;
		case 'i':
			INPUT = gdl_string_clone(optarg);
			break;
		case 'q':
			qual_value = atoi(optarg);
			break;
		case '?':
			GDL_ERROR_VAL("Unknown arguments", GDL_EINVAL, -1);
		default:
			GDL_ERROR_VAL("Bad arguments", GDL_EINVAL, -1);
		}
	}
}

/**
 * \fn static int check_argument(void)
 * \brief This function checks the main function arguments.
 * \return a success indicator
 */
static int check_argument(void) {
	if (INPUT == 0) {
		GDL_ERROR_VAL("No input fastq file provided", GDL_FAILURE, 1);
	}
	return GDL_SUCCESS;
}

/**
 * \fn static int help(void)
 * \brief This function prints the help
 */
static int help(void) {
	print_header(PROGRAM);
	printf("\n");
	printf("--help\tDisplay a brief help on program usage\n");
	printf("--verbose\tOutput message on standard output to see what the program is doing\n");
	printf("\n");
	printf("--input or -i\tAn input fasta file\n");
	printf("--qual or -q\tQuality value\n");
}

int main(int argc, char *argv[])
{
	int status;
	parse_argument(argc, argv);
	if (help_flag) {
		exit(help());
	}

	status = check_argument();

	if (status == GDL_SUCCESS)
        {
           size_t i;
	   gzFile fp;
	   kseq_t *seq;

	   fp = gzopen(INPUT, "r");
	   seq = kseq_init(fp);

	   // Default quality value
	   if (qual_value == 0) {
		   qual_value = 126;
	   }

	   while (kseq_read(seq) >= 0)
	   {
               printf ("@%s\n", seq->name.s);
               printf ("%s\n", seq->seq.s);
               printf ("+\n");
               for(i=0;i<strlen(seq->seq.s);i++)
               {
            	   printf ("%c",qual_value);
               }
               printf ("\n");
           }
	   kseq_destroy(seq);
	   gzclose(fp);
      }
      exit(0);
}
