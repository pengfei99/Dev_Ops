/*
 *  header.c
 *
 *  $Author: mahep $, $Date: 2012/10/02 17:25:37 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <time.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_igdb_genome.h>

#include "mixgenomix.h"


#include "header.c"

static gdl_string * PROGRAM = "mgx-fastasplit";

static int help_flag    = 0;
static int verbose_flag = 0;
static int debug_flag = 0;

static gdl_string * INPUT = NULL;
static gdl_string * OUTPUT = NULL;
static size_t N  = 0;

static struct option long_options[] =
{
		/* These options set a flag. */
		{"help", no_argument,          &help_flag, 1},
		{"verbose", no_argument,       &verbose_flag, 1},
		{"debug", no_argument,         &debug_flag, 1},
		{"brief",   no_argument,       &verbose_flag, 0},
		/* These options don't set a flag.
         We distinguish them by their indices. */
		{"input",   required_argument, 0, 'i'},
		{"output",   required_argument, 0, 'o'},
		{"size",   required_argument, 0, 's'},
		{0, 0, 0, 0}
};

static int
parse_argument (int argc, char *argv[])
{
	int c;

	while (1)
	{

		/* getopt_long stores the option index here. */
		int option_index = 0;

		c = getopt_long (argc, argv, "i:o:s:",
				long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
			break;

		switch (c)
		{
		case 0:
			/* If this option set a flag, do nothing else now. */
			if (long_options[option_index].flag != 0)
				break;
			printf ("option %s", long_options[option_index].name);
			if (optarg)
				printf (" with arg %s", optarg);
			printf ("\n");
			break;
		case 'i':
			INPUT = gdl_string_clone (optarg);
			break;
		case 'o':
			OUTPUT = gdl_string_clone (optarg);
			break;
		case 's':
			N = atoi (optarg);
			break;
		case '?':
			GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
		default:
			GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
		}
	}
}

static int
check_argument (void)
{
	if (INPUT == 0)
	{
		GDL_ERROR_VAL ("No input file provided",
				GDL_FAILURE,
				1);
	}
	if (OUTPUT == 0)
	{
		GDL_ERROR_VAL ("No output directory provided",
				GDL_FAILURE,
				1);
	}
	if (N <= 0){
		GDL_ERROR_VAL ("Size must be > 0 !",
				GDL_FAILURE,
				1);
	}
	return GDL_SUCCESS;
}

static int
help (void)
{
	print_header (PROGRAM);
	printf ("\n");
	printf ("--help\tDisplay a brief help on program usage\n");
	printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
	printf ("--debug\tMore detailed output message (e.g, for debugging purposes)\n");
	printf ("\n");
	printf ("--input or -i\t input file (fasta format)\n");
	printf ("--output or -o\t output file \n");
	printf ("--size or -s\t size of the chunks\n");

}



int
main (int argc, char *argv[])
{

	int status;

	parse_argument (argc, argv);

	if (help_flag)
	{
		exit (help());
	}

	if(debug_flag)
	{
		verbose_flag = 1;
	}

	status = check_argument ();


	if (status == GDL_SUCCESS)
	{

		FILE *instream, *outstream;
    	size_t n, seq_cptr, file_cptr, seq_in_file;
    	char *pch;

		gdl_string  * filename, *line = 0;

		// allocate memory for filename
		filename = gdl_string_alloc (strlen(OUTPUT)+100);


		// open input stream
		instream   = gdl_fileopen (INPUT, "r");

		// process lines
		seq_cptr = -1;
		seq_in_file = -1;
		file_cptr = 0;
    	while(gdl_getline (&line, &n, instream)!=-1)
		{
    		// check start of a new sequence
    		pch = strchr(line,'>');
    		if(pch != NULL){
    			seq_cptr++;
    			seq_in_file++;
        		// check wether need to open a new file
    			if((seq_cptr) % N == 0){
    				if(file_cptr > 0){
    					gdl_fileclose(filename, outstream);
    					printf("\t closing file %s (contains %d sequences)\n", filename, seq_in_file);
    					seq_in_file = 0;
    				}
    				// increment file counter
    				file_cptr++;
    				// create new file name
    				sprintf(filename, "%s/chunk-%d.fna", OUTPUT, file_cptr);
    				printf("-->processing sequence no %d, opening file%s\n", seq_cptr, filename);
    			    outstream   = gdl_fileopen (filename, "w");
    			}
    		}

			// write line in output file
			fprintf(outstream,"%s\n",line);
			// free getline string
	    	gdl_string_free (line);
	    	line=0;
		}
    	// close last file
    	gdl_fileclose(filename, outstream);
    	printf("\t closing file %s (contains %d sequences)\n", filename, seq_in_file+1);
	}

	exit (0);
}
