/*
 *  mgx-taxosubset.c
 *
 *  $Author: mahep $, $Date: 2011/11/16 08:46:33 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>
#include <gdl/gdl_list.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxo2dot";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;
static int taxid_flag = 0;

static gdl_string * TAXOSECOND   = NULL;
static gdl_string * TAXOFIRST   = NULL;
static gdl_string * OUTPUTFILE   = NULL;

static struct option long_options[] =
 {
   /* These options set a flag. */
   {"help", no_argument,          &help_flag, 1},
   {"verbose", no_argument,       &verbose_flag, 1},
   {"brief",   no_argument,       &verbose_flag, 0},
   {"no-missing",   no_argument,       &no_missing_flag, 1},
   {"taxid",   no_argument,       &taxid_flag, 1},
  /* These options don't set a flag.
      We distinguish them by their indices. */
   {"second",   required_argument, 0, 's'},
   {"first",   required_argument, 0, 'f'},
   {"output",   required_argument, 0, 'o'},
   {0, 0, 0, 0}
 };

static int
parse_argument (int argc, char *argv[])
{
	int c;

   while (1)
     {

       /* getopt_long stores the option index here. */
       int option_index = 0;

       c = getopt_long (argc, argv, "o:s:f:",
                        long_options, &option_index);

       /* Detect the end of the options. */
       if (c == -1)
         break;

       switch (c)
         {
         case 0:
           /* If this option set a flag, do nothing else now. */
           if (long_options[option_index].flag != 0)
             break;
           printf ("option %s", long_options[option_index].name);
           if (optarg)
             printf (" with arg %s", optarg);
           printf ("\n");
           break;

         case 's':
           TAXOSECOND = gdl_string_clone (optarg);
           break;
         case 'f':
           TAXOFIRST = gdl_string_clone (optarg);
           break;
         case 'o':
		   OUTPUTFILE = gdl_string_clone (optarg);
		   break;
		 case '?':
           GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
         default:
           GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
         }
     }
}

static int
check_argument (void)
{

	if (TAXOFIRST == 0)
	{
		GDL_ERROR_VAL ("First taxonomy not specified",
					   GDL_FAILURE,
					   1);
	}
	if (TAXOSECOND == 0)
	{
		GDL_ERROR_VAL ("Second taxonomy not specified",
					   GDL_FAILURE,
					   1);
	}
	if (OUTPUTFILE == 0)
	{
		GDL_ERROR_VAL ("No output file provided",
					   GDL_FAILURE,
					   1);
	}

	return GDL_SUCCESS;
}


static int
help (void)
{
   print_header (PROGRAM);
   printf ("\n");
   printf ("--help\tDisplay a brief help on program usage\n");
   printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
   printf ("\n");
   printf ("--first or -f\tThe first input taxonomy file (taxo-db format)\n");
   printf ("--second or -s\tThe second input taxonomy file (taxo-db format)\n");
   printf ("--output or -o\tThe output file to write the selected taxons to");
   printf ("--taxid Flag specifying to write taxon ids in output file (default format : names)\n");
}



int findMatch(mgx_taxonomy *t_1, mgx_taxonomy *t_2, mgx_taxonomy_lookup_index *t_1_index, size_t index, int taxid){
	mgx_taxon *tax;

	// match current taxon
	if(taxid){
		char *s;
		s = gdl_string_sprintf("%ld",  t_2->taxons[index]->id);
		tax = mgx_taxonomy_lookup(t_1, t_1_index, s);
		gdl_string_free(s);
	}else{
		tax = mgx_taxonomy_lookup(t_1, t_1_index, t_2->taxons[index]->names[0]);
	}
	// if found : return index, if not : turn to parent
	if(tax == 0){
		if(t_2->taxons[index]->parent == NULL){
			return(-1);
		}else{
			findMatch(t_1, t_2, t_1_index, t_2->taxons[index]->parent->index, taxid);
		}
	}else{
		return(tax->index);
	}
}



int
main (int argc, char *argv[])
{
  int status;

  parse_argument (argc, argv);

  if (help_flag)
  {
  	  exit (help());
  }

  status = check_argument ();

  if (status == GDL_SUCCESS)
  {

		mgx_taxonomy * taxonomy_1, *taxonomy_2;
    	mgx_taxonomy_lookup_index *taxonomy_1_index;
        FILE * stream;
        size_t i;
        size_t * match_indices;
        mgx_taxon * taxtmp;


        // read first (small) taxonomy
	    stream   = gdl_fileopen (TAXOFIRST, "r");
	    taxonomy_1 = mgx_taxonomy_fread (stream);
	    gdl_fileclose (TAXOFIRST, stream);
        // read first (large) taxonomy
	    stream   = gdl_fileopen (TAXOSECOND, "r");
	    taxonomy_2 = mgx_taxonomy_fread (stream);
	    gdl_fileclose (TAXOSECOND, stream);

	    if(verbose_flag){
	    	printf("\nTaxonomies succesfully read, summary : \n");
	    	printf("\t-first taxonomy : \n");
	    	printf("\t\t-number of nodes = %d\n", taxonomy_1->ntaxon);
			printf("\t\t-maximum depth = %d\n", taxonomy_1->maxdepth);
			printf("\t\t-root node name = %s\n", taxonomy_1->root->names[0]);
			if(taxid_flag){
				printf("\t\t-root node taxid = %d\n", taxonomy_1->root->id);
			}
			printf("\t-second taxonomy : \n");
	    	printf("\t\t-number of nodes = %d\n", taxonomy_2->ntaxon);
			printf("\t\t-maximum depth = %d\n", taxonomy_2->maxdepth);
			printf("\t\t-root node name = %s\n", taxonomy_2->root->names[0]);
			if(taxid_flag){
				printf("\t\t-root node taxid = %d\n", taxonomy_2->root->id);
			}
	    }

	    /* // we might want to check taxonomies have the same root...
	    if(taxid_flag){
	    	if(taxonomy_1->root->id != taxonomy_2->root->id){
	    		GDL_ERROR_VAL ("taxonomies root don't match !", GDL_FAILURE,1);
	    	}
	    }else{
	    	if(strcmp(taxonomy_1->root->names[0], taxonomy_1->root->names[0]) != 0){
	    		GDL_ERROR_VAL ("taxonomies root don't match !", GDL_FAILURE,1);
	    	}
	    }
		*/

	    // we want to match the large taxo in the small one
	    // for that we build a hash table id/names to index
	    if (taxid_flag){
    		taxonomy_1_index = mgx_taxonomy_taxon_lookup_build(taxonomy_1, "id");
	    }else{
    		taxonomy_1_index = mgx_taxonomy_taxon_lookup_build(taxonomy_1, "name");
	    }


	    // extract index of each in the large taxo
		match_indices = GDL_CALLOC (size_t *, taxonomy_2->ntaxon);
		for(i = 0; i < taxonomy_2->ntaxon; i++){
				match_indices[i] = findMatch(taxonomy_1, taxonomy_2, taxonomy_1_index, i, taxid_flag);
				//printf("taxon no %d  : match = %d\n", i, match_indices[i]);
		}


		// open output file
		stream = gdl_fileopen (OUTPUTFILE, "w");

	    // write taxons to output file
		for(i = 0 ; i < taxonomy_2->ntaxon; i++){
			if(match_indices[i]==-1){
				if(taxid_flag){
					fprintf(stream, "%d;NULL\n", taxonomy_2->taxons[i]->id);
				}else{
					fprintf(stream, "%s;NULL\n", taxonomy_2->taxons[i]->names[0]);
				}
			}else{
				if(taxid_flag){
					fprintf(stream, "%d;%d\n", taxonomy_2->taxons[i]->id, taxonomy_1->taxons[match_indices[i]]->id);
				}else{
					fprintf(stream, "%s;%s\n", taxonomy_2->taxons[i]->names[0], taxonomy_1->taxons[match_indices[i]]->names[0]);
				}
			}
		}
		// close output file
		gdl_fileclose (OUTPUTFILE, stream);


  }

  exit (0);
}

