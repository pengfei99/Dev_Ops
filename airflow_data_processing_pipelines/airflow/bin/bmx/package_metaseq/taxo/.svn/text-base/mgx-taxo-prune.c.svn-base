/*
 *  mgx-taxolca.c
 *
 *  $Author: mahep $, $Date: 2011/09/20 16:03:18 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxoprune";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;
static int updatedepth_flag = 1;

static gdl_string * TAXODB   = NULL;
static gdl_string * OUTPUT   = NULL;

static struct option long_options[] =
 {
   /* These options set a flag. */
   {"help", no_argument,          &help_flag, 1},
   {"verbose", no_argument,       &verbose_flag, 1},
   {"brief",   no_argument,       &verbose_flag, 0},
   {"no-missing",   no_argument,       &no_missing_flag, 1},
   {"keepdepth",   no_argument,       &updatedepth_flag, 0},
   /* These options don't set a flag.
      We distinguish them by their indices. */
   {"output",   required_argument, 0, 'o'},
   {"taxodb",   required_argument, 0, 't'},
   {0, 0, 0, 0}
 };

static int
parse_argument (int argc, char *argv[])
{
	int c;

   while (1)
     {

       /* getopt_long stores the option index here. */
       int option_index = 0;

       c = getopt_long (argc, argv, "o:t:",
                        long_options, &option_index);

       /* Detect the end of the options. */
       if (c == -1)
         break;

       switch (c)
         {
         case 0:
           /* If this option set a flag, do nothing else now. */
           if (long_options[option_index].flag != 0)
             break;
           printf ("option %s", long_options[option_index].name);
           if (optarg)
             printf (" with arg %s", optarg);
           printf ("\n");
           break;

         case 'o':
           OUTPUT = gdl_string_clone (optarg);
           break;
         case 't':
		   TAXODB = gdl_string_clone (optarg);
		   break;
         case '?':
           GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
         default:
           GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
         }
     }
}

static int
check_argument (void)
{
	if (OUTPUT == 0)
	{
		GDL_ERROR_VAL ("No output file provided",
					   GDL_FAILURE,
					   1);
	}
	if (TAXODB == 0)
	{
		GDL_ERROR_VAL ("No taxonomy database file provided",
					   GDL_FAILURE,
					   1);
	}

	return GDL_SUCCESS;
}


static int
help (void)
{
   print_header (PROGRAM);
   printf ("\n");
   printf ("--help\tDisplay a brief help on program usage\n");
   printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
   printf ("\n");
   printf ("--output or -o\tThe output file\n");
   printf ("--taxodb or -t\tThe taxonomy database file\n");
   printf ("[--keepdepth \t flag specifying to keep original nodes depth]\n");
   printf ("     (useful for svm-struct)\n");
}

int
main (int argc, char *argv[])
{
  int status;

  parse_argument (argc, argv);

  if (help_flag)
  {
  	  exit (help());
  }

  status = check_argument ();

  if (status == GDL_SUCCESS)
  {
	    mgx_taxonomy * taxonomy;
        FILE * stream;
        size_t i, j, ntaxon_to_rm, ntaxon_removed;
        mgx_taxon * taxon_to_rm;

        // read taxonomy
	    stream   = gdl_fileopen (TAXODB, "r");
	    taxonomy = mgx_taxonomy_fread (stream);
	    gdl_fileclose (TAXODB, stream);

		// sanity check : compute number of taxons to remove
		ntaxon_to_rm = 0;
		for(i = 0; i < taxonomy->ntaxon; i++){
			if(taxonomy->taxons[i]->nchild == 1){
				ntaxon_to_rm++;
			}
		}

	    if(verbose_flag){
	    	printf("\nEntering pruning process : \n");
	    	printf("\t--> initial taxonomy size = %d\n", taxonomy->ntaxon);
			printf("\t--> root node ID = %s\n", taxonomy->root->names[0]);
	    	printf("\t--> number of taxons to remove = %d\n", ntaxon_to_rm);
	    }

		// pruning process
		ntaxon_removed = 0;
		for(i = 0; i < taxonomy->ntaxon; i++){
			if(taxonomy->taxons[i]->nchild == 1){
			    /*if(verbose_flag){
			    	printf("\t\t-taxon no %d (%s) to be removed\n", i, taxonomy->taxons[i]->names[0]);
			    }*/
				taxon_to_rm = taxonomy->taxons[i];
				// update child node : modify the parent node pointer
				taxonomy->taxons[i]->children[0]->parent = taxonomy->taxons[i]->parent;
				// update parent node : replace the pointer to current taxon to its child (NB : except if taxon to remove = root)
				if(taxonomy->taxons[i]->parent != NULL){
					for(j = 0; j < taxonomy->taxons[i]->parent->nchild; j++){
						//if(taxonomy->taxons[i]->parent->children[j]->index == i){
						if(taxonomy->taxons[i]->parent->children[j] == taxonomy->taxons[i]){
							taxonomy->taxons[i]->parent->children[j] = taxonomy->taxons[i]->children[0];
						}
					}
				}else{
					// if taxon to remove = root, modify the root pointer in the taxonomy
					taxonomy->root = taxonomy->taxons[i]->children[0];
				}
				// translate subsequent taxons in taxons list
				for(j = i+1; j < taxonomy->ntaxon; j++){
					// modify indices
					taxonomy->taxons[j-1] = taxonomy->taxons[j];
					taxonomy->taxons[j-1]->index = j-1;
					// if ranks : modify rid2tx
					if(taxonomy->ranks){
						taxonomy->ranks->rid2tx[j-1] = taxonomy->ranks->rid2tx[j];
					}
				}
				// free taxon to remove
				free(taxon_to_rm);
					//printf("\t\t--> taxon removed\n");
				ntaxon_removed++;
				// decrement taxonomy size
				taxonomy->ntaxon--;
					// printf("\t\t taxonomy size = %d\n", taxonomy->ntaxon);
				// decrement index i
				i--;
			}
		}

		// modify depth
		if(updatedepth_flag){
			taxonomy->root->depth = 0;
			mgx_taxonomy_update_depth(taxonomy, taxonomy->root->index);
		}

		// update taxid2index
		if(taxonomy->taxid2index){
			// free and realloc array
			GDL_FREE(taxonomy->taxid2index);
			taxonomy->taxid2index   = GDL_MALLOC (size_t, taxonomy->n_taxid2index);
			// update with new indices
			for(i = 0 ; i < taxonomy->ntaxon ; i++){
				taxonomy->taxid2index[  taxonomy->taxons[i]->id ] = i;
			}
		}

		// sanity check
		if(ntaxon_removed != ntaxon_to_rm){
			GDL_ERROR_VAL (gdl_string_sprintf("Removed %d taxons instead of %d expected", ntaxon_removed, ntaxon_to_rm), GDL_FAILURE, GDL_FAILURE);
		}

	    if(verbose_flag){
	    	printf("\n\nExiting pruning process :\n");
	    	printf("\t--> final taxonomy size = %d\n", taxonomy->ntaxon);
	    	printf("\t--> number of taxons removed = %d\n", ntaxon_removed);
			printf("\t--> root node ID = %s\n", taxonomy->root->names[0]);
	    	/*printf("\t--> remaining nodes : \n");
	    	for(i = 0; i < taxonomy->ntaxon; i++){
	    		printf("\t\t-taxon no %d (index = %d) : %s\n", i, taxonomy->taxons[i]->index, taxonomy->taxons[i]->names[0]);
	    	}*/
	    }
            if (taxonomy->M) { // means that rmq structs for linear LCA search needs to be updated
               mgx_taxonomy_euler_tour (taxonomy);
               mgx_taxonomy_rmq_prepare (taxonomy);
            }
	    // write pruned taxo-db
	    stream = gdl_fileopen (OUTPUT, "w");
	    mgx_taxonomy_fwrite (stream, taxonomy);
	    // close output file
	    gdl_fileclose (OUTPUT, stream);

  }

  exit (0);
}

