/*
 *  ncbi_taxo.c
 *
 *  $Author: veyriejb $, $Date: 2011/05/25 13:21:37 $, $Version$
 *
 *  MetagenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */
#include <stdint.h>
#include <limits.h>
#include <stdarg.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_types.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_hash.h>
#include <gdl/gdl_list.h>

#include "taxo.h"

/**
fields:
	tax_id					-- node id in GenBank taxonomy database
 	parent tax_id				-- parent node id in GenBank taxonomy database
 	rank					-- rank of this node (superkingdom, kingdom, ...)
 	embl code				-- locus-name prefix; not unique
 	division id				-- see division.dmp file
 	inherited div flag  (1 or 0)		-- 1 if node inherits division from parent
 	genetic code id				-- see gencode.dmp file
 	inherited GC  flag  (1 or 0)		-- 1 if node inherits genetic code from parent
 	mitochondrial genetic code id		-- see gencode.dmp file
 	inherited MGC flag  (1 or 0)		-- 1 if node inherits mitochondrial gencode from parent
 	GenBank hidden flag (1 or 0)            -- 1 if name is suppressed in GenBank entry lineage
 	hidden subtree root flag (1 or 0)       -- 1 if this subtree has no sequence data yet
 	comments				-- free-text comments and citations
*/
typedef struct
{
	size_t tax_id;
	gdl_string * parent_tax_id;
	size_t rank_idx;
} mgx_taxon_ncbi;

static void
mgx_taxon_ncbi_free (mgx_taxon_ncbi * t)
{
	if (t)
	{
		GDL_FREE (t->parent_tax_id);
		GDL_FREE (t);
	}
}

static mgx_taxon_ncbi *
mgx_taxonomy_factory_ncbi_read_taxon (gdl_string  ** tokens, const size_t n, gdl_hashtable * rank_buffer)
{
	size_t i, * rank_idx;
	mgx_taxon_ncbi * tx = GDL_MALLOC (mgx_taxon_ncbi, 1);

	tx->tax_id        = (size_t)atol(tokens[0]);
	tx->parent_tax_id = gdl_string_clone (tokens[1]);
	if ((rank_idx = gdl_hashtable_lookup (rank_buffer, tokens[2]))==0)
	{
		rank_idx  = GDL_MALLOC (size_t, 1);
		*rank_idx = gdl_hashtable_size (rank_buffer);
		gdl_hashtable_add (rank_buffer, tokens[2], rank_idx, 1);
	}
	tx->rank_idx = *rank_idx;
	return tx;
}

static void
mgx_taxonomy_factory_build_tree (mgx_taxonomy * taxo, mgx_taxon * parent, const size_t depth, gdl_hashtable * taxon_table)
{
	mgx_taxon_ncbi * tn = (mgx_taxon_ncbi *)parent->extra;
    gdl_string * key    = gdl_string_sprintf ("%ld", tn->tax_id);
	gdl_list * children = (gdl_list *)gdl_hashtable_lookup (taxon_table, key);

	// Add depth + id mapping
	parent->depth = depth;
	parent->id    = tn->tax_id;
	taxo->taxid2index[tn->tax_id] = parent->index;
	parent->extra = 0;

	if (children && gdl_list_size(children))
	{
		size_t i=0;

		parent->nchild   = gdl_list_size (children);
		parent->children = GDL_MALLOC (mgx_taxon *, parent->nchild);

		gdl_list_itr * itr = gdl_list_iterator_front (children);
		do
		{
			mgx_taxon * child     = (mgx_taxon *) gdl_list_iterator_value (itr);
			child->parent         = parent;
			parent->children[i++] = child;
			// Recursion
			mgx_taxonomy_factory_build_tree (taxo, child, depth+1, taxon_table);
		}
		while (gdl_list_iterator_next (itr));
		gdl_list_iterator_free (itr);

		gdl_list_free (children);
	}
	// clean
	mgx_taxon_ncbi_free (tn);
	gdl_string_free (key);
}

static mgx_taxonomy *
mgx_taxonomy_factory_ncbi_read_nodes (const gdl_string * filename)
{
	FILE * stream;
	size_t i,ntoken,n,max_tax_id=0;
	gdl_hashtable * rank_buffer, * taxon_table;
	gdl_list      * taxons, * taxon_children;
	gdl_string   ** tokens;
	gdl_string    * line = 0;
	mgx_taxonomy * t = 0;

	stream = gdl_fileopen (filename, "r");

	rank_buffer = gdl_hashtable_alloc (gdl_interface_uint, 0);
	taxons      = gdl_list_alloc (gdl_list_default);
	while(gdl_getline (&line, &n, stream)!=-1)
	{
		tokens = gdl_string_split (line, "\t|\t", &ntoken);
		gdl_list_append (taxons, mgx_taxonomy_factory_ncbi_read_taxon (tokens, ntoken, rank_buffer), 0);
		GDL_MATRIX_FREE (tokens, ntoken);
		gdl_string_free (line);
		line=0;
	}
	gdl_fileclose (filename, stream);

	// number of taxons
	n        = gdl_list_size (taxons);
	t        = mgx_taxonomy_alloc (n);
	t->ranks = mgx_taxonomy_rank_alloc (gdl_hashtable_size (rank_buffer), n);
	mgx_taxonomy_rank_init (t->ranks, rank_buffer);
	gdl_hashtable_free (rank_buffer);
	// for each taxon PUSH(@{HASH{taxon->parent_tax_id}},taxon->tax_id) then goes from the root recursively
	i           = 0;
	taxon_table = gdl_hashtable_alloc (gdl_hash_default, n);
	gdl_list_itr * taxon_itr = gdl_list_iterator_front (taxons);
	do
	{
		mgx_taxon_ncbi * taxon_ncbi = gdl_list_iterator_value (taxon_itr);
		if (taxon_ncbi->tax_id > max_tax_id)
		{
			max_tax_id = taxon_ncbi->tax_id;
		}
		// Alloc taxon
		t->ranks->rid2tx[i] = taxon_ncbi->rank_idx;
		t->taxons[i]        = mgx_taxon_alloc (i);
		t->taxons[i]->extra = taxon_ncbi;
		// ROOT
		if (taxon_ncbi->tax_id==(size_t)atol(taxon_ncbi->parent_tax_id))
		{
	   	    t->root = t->taxons[i];
		}
        else
		{
			// Add to the taxon_children of the parent
			if ((taxon_children = gdl_hashtable_lookup (taxon_table, taxon_ncbi->parent_tax_id))==0)
			{
			   taxon_children = gdl_list_alloc (gdl_list_default);
			   gdl_hashtable_add (taxon_table, taxon_ncbi->parent_tax_id, taxon_children, 0);
			}
			gdl_list_append (taxon_children, t->taxons[i], 0);
		}
		i++;
	}
	while (gdl_list_iterator_next (taxon_itr));
	gdl_list_iterator_free (taxon_itr);

	// Allocate the taxid2index array
	t->n_taxid2index = max_tax_id;
	t->taxid2index   = GDL_MALLOC (size_t, max_tax_id);
	// Recursively build the tree
	mgx_taxonomy_factory_build_tree (t, t->root, 0, taxon_table);
	// Clean the buffers
	gdl_list_free (taxons);
	gdl_hashtable_free (taxon_table);

	return t;
}

/**
 * Taxonomy names file (names.dmp):
 *       tax_id                                  -- the id of node associated with this name
 *       name_txt                                -- name itself
 *       unique name                             -- the unique variant of this name if name not unique
 *       name class                              -- (synonym, common name, ...)
 *
 */
static int
mgx_taxonomy_factory_ncbi_read_names (const gdl_string * filename, mgx_taxonomy * taxonomy)
{
	FILE * stream;
	size_t i,ntoken,n;
	gdl_string   ** tokens;
	gdl_string    * line = 0;

	stream = gdl_fileopen (filename, "r");

	while(gdl_getline (&line, &n, stream)!=-1)
	{
		tokens = gdl_string_split (line, "\t|\t", &ntoken);
		if (ntoken != 4)
		{
			GDL_ERROR_VAL (gdl_string_sprintf("Bad format for line:\n%s\n"), GDL_FAILURE, GDL_FAILURE);
		}
		if (!strncmp(tokens[3], "scientific name", 15))
		{
			mgx_taxon * taxon = taxonomy->taxons[taxonomy->taxid2index[atol(tokens[0])]];
			mgx_taxon_add_name (taxon, tokens[1]);
		}
		GDL_MATRIX_FREE (tokens, ntoken);
		gdl_string_free (line);
		line=0;
	}
	gdl_fileclose (filename, stream);

	return GDL_SUCCESS;
}
/**
 * Read the nodes.dmp and names.dmp files from
 * the ncbi taxonomy assumed to be located withi
 * the directory provided by dir
 */
mgx_taxonomy *
mgx_taxonomy_factory_ncbi_read (const gdl_string * dir)
{
	gdl_string * file;
	mgx_taxonomy * taxo;

	file = gdl_string_sprintf ("%s/nodes.dmp", dir);
	taxo = mgx_taxonomy_factory_ncbi_read_nodes (file);
	gdl_string_free (file);

	file = gdl_string_sprintf ("%s/names.dmp", dir);
	if (gdl_isfile (file))
	{
		mgx_taxonomy_factory_ncbi_read_names (file, taxo);
	}
	gdl_string_free (file);

	return taxo;
}

int
mgx_taxonomy_factory_ncbi_write (const mgx_taxonomy * T, const gdl_string * output_stem)
{

}

static const mgx_taxonomy_factory _mgx_taxonomy_factory_ncbi =
{
	"ncbi",
	&mgx_taxonomy_factory_ncbi_read,
	&mgx_taxonomy_factory_ncbi_write
};

const mgx_taxonomy_factory * mgx_taxonomy_ncbi_factory = &_mgx_taxonomy_factory_ncbi;
