/*
 *  mgx-taxosubset.c
 *
 *  $Author: mahep $, $Date: 2011/09/12 08:44:31 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>
#include <gdl/gdl_list.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxo2dot";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;
static int taxid_flag = 0;

static gdl_string * TAXODB   = NULL;
static gdl_string * RANK   = NULL;
static gdl_string * OUTPUTFILE   = NULL;

static struct option long_options[] =
 {
   /* These options set a flag. */
   {"help", no_argument,          &help_flag, 1},
   {"verbose", no_argument,       &verbose_flag, 1},
   {"brief",   no_argument,       &verbose_flag, 0},
   {"no-missing",   no_argument,       &no_missing_flag, 1},
   {"taxid",   no_argument,       &taxid_flag, 1},
  /* These options don't set a flag.
      We distinguish them by their indices. */
   {"input",   required_argument, 0, 'i'},
   {"rank",   required_argument, 0, 'r'},
   {"output",   required_argument, 0, 'o'},
   {0, 0, 0, 0}
 };

static int
parse_argument (int argc, char *argv[])
{
	int c;

   while (1)
     {

       /* getopt_long stores the option index here. */
       int option_index = 0;

       c = getopt_long (argc, argv, "o:i:r:",
                        long_options, &option_index);

       /* Detect the end of the options. */
       if (c == -1)
         break;

       switch (c)
         {
         case 0:
           /* If this option set a flag, do nothing else now. */
           if (long_options[option_index].flag != 0)
             break;
           printf ("option %s", long_options[option_index].name);
           if (optarg)
             printf (" with arg %s", optarg);
           printf ("\n");
           break;

         case 'i':
           TAXODB = gdl_string_clone (optarg);
           break;
         case 'r':
           RANK = gdl_string_clone (optarg);
           break;
         case 'o':
		   OUTPUTFILE = gdl_string_clone (optarg);
		   break;
		 case '?':
           GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
         default:
           GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
         }
     }
}

static int
check_argument (void)
{

	if (TAXODB == 0)
	{
		GDL_ERROR_VAL ("No input taxonomy database file provided",
					   GDL_FAILURE,
					   1);
	}
	if (RANK == 0)
	{
		GDL_ERROR_VAL ("No minimum rank specified",
					   GDL_FAILURE,
					   1);
	}	if (OUTPUTFILE == 0)
	{
		GDL_ERROR_VAL ("No output file provided",
					   GDL_FAILURE,
					   1);
	}

	return GDL_SUCCESS;
}


static int
help (void)
{
   print_header (PROGRAM);
   printf ("\n");
   printf ("This program extracts the list of taxa of a given rank in a taxonomy\n");
   printf ("(e.g., extract all species-level taxids\n");   
   printf ("--help\tDisplay a brief help on program usage\n");
   printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
   printf ("\n");
   printf ("--input or -i\tThe input taxonomy file (taxo-db format)\n");
   printf ("--rank or -r\tThe rank to consider\n");
   printf ("--output or -o\tThe output file to write the selected taxons to\n");
   printf ("--taxid Flag specifying to write taxon ids in output file (default format : names)\n");
}




int
main (int argc, char *argv[])
{
  int status;

  parse_argument (argc, argv);

  if (help_flag)
  {
  	  exit (help());
  }

  status = check_argument ();

  if (status == GDL_SUCCESS)
  {

		mgx_taxonomy * taxonomy;
        FILE * stream;
        size_t i;


        // read taxonomy
	    stream   = gdl_fileopen (TAXODB, "r");
	    taxonomy = mgx_taxonomy_fread (stream);
	    gdl_fileclose (TAXODB, stream);


	    if(verbose_flag){
	    	printf("\nTaxonomy succesfully read, summary : \n");
			printf("\t-number of nodes = %d\n", taxonomy->ntaxon);
			printf("\t-maximum depth = %d\n", taxonomy->maxdepth);
			printf("\t-root node ID = %s\n", taxonomy->root->names[0]);
	    }

		// open output file
		stream = gdl_fileopen (OUTPUTFILE, "w");

	    // write taxons to output file
		for(i = 0 ; i < taxonomy->ntaxon; i++){
			if(  strcmp(taxonomy->ranks->rank_names[taxonomy->ranks->rid2tx[i]],RANK) == 0 ){
					if(taxid_flag){
						fprintf(stream, "%d\n", taxonomy->taxons[i]->id);
					}else{
						fprintf(stream, "%d\n", taxonomy->taxons[i]->names[0]);
					}
			}
		}
		// close output file
		gdl_fileclose (OUTPUTFILE, stream);

  }

  exit (0);
}

