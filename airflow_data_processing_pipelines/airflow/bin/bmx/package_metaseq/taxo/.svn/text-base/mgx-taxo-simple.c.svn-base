/*
 *  mgx-taxo2simpletaxo.c
 *
 *  $Author: vervieke $, $Date: 2012/05/18 11:33:32 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxo2simpletaxo";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;

static gdl_string * TAXODB   = NULL;
static gdl_string * OUTPUT   = NULL;

static struct option long_options[] =
 {
   /* These options set a flag. */
   {"help", no_argument,          &help_flag, 1},
   {"verbose", no_argument,       &verbose_flag, 1},
   {"brief",   no_argument,       &verbose_flag, 0},
   {"no-missing",   no_argument,       &no_missing_flag, 1},
   /* These options don't set a flag.
      We distinguish them by their indices. */
   {"taxodb",   required_argument, 0, 't'},
   {"output",   required_argument, 0, 'o'},
   {0, 0, 0, 0}
 };

static int
parse_argument (int argc, char *argv[])
{
	int c;

   while (1)
     {

       /* getopt_long stores the option index here. */
       int option_index = 0;

       c = getopt_long (argc, argv, "o:t:",
                        long_options, &option_index);

       /* Detect the end of the options. */
       if (c == -1)
         break;

       switch (c)
         {
         case 0:
           /* If this option set a flag, do nothing else now. */
           if (long_options[option_index].flag != 0)
             break;
           printf ("option %s", long_options[option_index].name);
           if (optarg)
             printf (" with arg %s", optarg);
           printf ("\n");
           break;
         case 'o':
           OUTPUT = gdl_string_clone (optarg);
           break;
         case 't':
		   TAXODB = gdl_string_clone (optarg);
		   break;
         case '?':
           GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
         default:
           GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
         }
     }
}

static int
check_argument (void)
{
	if (OUTPUT == 0)
		{
			GDL_ERROR_VAL ("No output file provided",
						   GDL_FAILURE,
						   1);
		}

	if (TAXODB == 0)
	{
		GDL_ERROR_VAL ("No taxonomy database file provided",
					   GDL_FAILURE,
					   1);
	}

	return GDL_SUCCESS;
}


static int
help (void)
{
   print_header (PROGRAM);
   printf ("\n");
   printf ("--help\tDisplay a brief help on program usage\n");
   printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
   printf ("\n");
   printf ("--output or -o\tThe output file");
   printf ("--taxodb or -t\tThe taxonomy database file\n");
}

int
main (int argc, char *argv[])
{
	  int status;

	  parse_argument (argc, argv);

	  if (help_flag)
	  {
	  	  exit (help());
	  }

	  status = check_argument ();

	  if (status == GDL_SUCCESS)
	  {
		    mgx_taxonomy * taxonomy;
	        FILE * stream;
	        FILE * stream_output;
	        size_t i, j, ntaxon_to_rm, ntaxon_removed;
	        mgx_taxon * taxon_to_rm;

	        // read taxonomy
		    stream   = gdl_fileopen (TAXODB, "r");
		    taxonomy = mgx_taxonomy_fread (stream);
		    gdl_fileclose (TAXODB, stream);

		 // write pruned taxo-db
		  stream_output = gdl_fileopen (OUTPUT, "w");
		 //fprintf(stream_output,"Son_ID \t Father_ID \n");

		    for(i=0;i<taxonomy->ntaxon;i++){
		        if(verbose_flag){
		    		printf("TaxoId: %s \t",taxonomy->taxons[i]->names[0]);fflush(stdout);
			}
		    	if(taxonomy->taxons[i]== taxonomy->root){
 	                        if(verbose_flag){
					printf("ROOT: Father: %s \n",taxonomy->root->names[0]);fflush(stdout);
				}
		    		fprintf(stream_output,"%s \t %s \n",taxonomy->taxons[i]->names[0],taxonomy->root->names[0]);
		    	}else{
				if(verbose_flag){
					printf("Father: %s \n",taxonomy->taxons[i]->parent->names[0]);fflush(stdout);
				}
		    		fprintf(stream_output,"%s \t %s \n",taxonomy->taxons[i]->names[0],taxonomy->taxons[i]->parent->names[0]);
			}
		    }
		//fprintf(stream_output,"\n");
		// close output file
		gdl_fileclose (OUTPUT, stream_output);

	  }

	  exit (0);
	}

