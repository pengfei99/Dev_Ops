/*
 *  mgx-taxolca.c
 *
 *  $Author: mahep $, $Date: 2011/09/20 14:46:59 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxodescribe";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;

static gdl_string * TAXODB   = NULL;

static struct option long_options[] =
 {
   /* These options set a flag. */
   {"help", no_argument,          &help_flag, 1},
   {"verbose", no_argument,       &verbose_flag, 1},
   {"brief",   no_argument,       &verbose_flag, 0},
   {"no-missing",   no_argument,       &no_missing_flag, 1},
   /* These options don't set a flag.
      We distinguish them by their indices. */
   {"taxodb",   required_argument, 0, 't'},
   {0, 0, 0, 0}
 };

static int
parse_argument (int argc, char *argv[])
{
	int c;

   while (1)
     {

       /* getopt_long stores the option index here. */
       int option_index = 0;

       c = getopt_long (argc, argv, "o:t:",
                        long_options, &option_index);

       /* Detect the end of the options. */
       if (c == -1)
         break;

       switch (c)
         {
         case 0:
           /* If this option set a flag, do nothing else now. */
           if (long_options[option_index].flag != 0)
             break;
           printf ("option %s", long_options[option_index].name);
           if (optarg)
             printf (" with arg %s", optarg);
           printf ("\n");
           break;

         case 't':
		   TAXODB = gdl_string_clone (optarg);
		   break;
         case '?':
           GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
         default:
           GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
         }
     }
}

static int
check_argument (void)
{

	if (TAXODB == 0)
	{
		GDL_ERROR_VAL ("No taxonomy database file provided",
					   GDL_FAILURE,
					   1);
	}

	return GDL_SUCCESS;
}


static int
help (void)
{
   print_header (PROGRAM);
   printf ("\n");
   printf ("--help\tDisplay a brief help on program usage\n");
   printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
   printf ("\n");
   printf ("--taxodb or -t\tThe taxonomy database file\n");
}

int
main (int argc, char *argv[])
{

	int status;

  parse_argument (argc, argv);

  if (help_flag)
  {
  	  exit (help());
  }

  status = check_argument ();

  if (status == GDL_SUCCESS)
  {
	    mgx_taxonomy * taxonomy;
        FILE * stream;
        size_t i, j, cptr;
        mgx_taxon * taxon_to_rm;
        size_t * depth_count, * degree_count, * rank_count;

        // read taxonomy
	    stream   = gdl_fileopen (TAXODB, "r");
	    taxonomy = mgx_taxonomy_fread (stream);
	    gdl_fileclose (TAXODB, stream);

	    // compute taxonomy maximum depth
	    mgx_taxonomy_max_depth(taxonomy);

	    // compute taxonomy maximum degree
	    mgx_taxonomy_max_degree(taxonomy);

	    // count the number of nodes of a given depth
		depth_count = GDL_CALLOC (size_t *, taxonomy->maxdepth+1);
		for(i = 0; i < taxonomy->ntaxon; i++){
				depth_count[taxonomy->taxons[i]->depth]++;
		}

	    // count the number of nodes of a given degree
		degree_count = GDL_CALLOC (size_t *, taxonomy->maxdegree+1);
		for(i = 0; i < taxonomy->ntaxon; i++){
				degree_count[taxonomy->taxons[i]->nchild]++;
		}

	    // count the number of nodes of a given rank
		if(taxonomy->ranks){
			rank_count = GDL_CALLOC (size_t *, taxonomy->ranks->nrank);
			for(i = 0; i < taxonomy->ntaxon; i++){
				rank_count[taxonomy->ranks->rid2tx[i]]++;
			}
		}

	    // print general information about the taxonomy
	    printf("\n-taxonomy size = %d\n", taxonomy->ntaxon);
	    printf("-taxonomy root = %s\n", taxonomy->root->names[0]);

	    // print number of nodes of various depths
	    printf("-maximum node depth = %d\n", taxonomy->maxdepth);
	    cptr = 0;
		for(i =0; i <= taxonomy->maxdepth; i++){
			printf("\t-number of nodes with depth = %d : %d\n", i, depth_count[i]);
			cptr += depth_count[i];
		}
			// sanity check :
		if(cptr != taxonomy->ntaxon){
			GDL_ERROR_VAL ("sum of nodes of various depths does not correspond to the size of the taxonomy.",GDL_FAILURE,1);
		}

		// print number of nodes of various out-degree
	    printf("-maximum node degree = %d\n", taxonomy->maxdegree);
	    cptr = 0;
	    for(i =0; i <= taxonomy->maxdegree; i++){
			if(degree_count[i] > 0){
				printf("\t-number of nodes with degree = %d : %d\n", i, degree_count[i]);
			}
			cptr += degree_count[i];
		}
			// sanity check :
	    if(cptr != taxonomy->ntaxon){
	    	GDL_ERROR_VAL ("sum of nodes of various out-degrees does not correspond to the size of the taxonomy.",GDL_FAILURE,1);
	    }

	    // print nodes of the various ranks
		if(taxonomy->ranks){
			printf("-number or ranks present in the taxonomy = %d\n", taxonomy->ranks->nrank);
			cptr = 0;
			for(i =0; i < taxonomy->ranks->nrank; i++){
				printf("\t-number of nodes of rank %d = %s : %d\n", i, taxonomy->ranks->rank_names[i], rank_count[i]);
				cptr += rank_count[i];
			}
			// sanity check :
			if(cptr != taxonomy->ntaxon){
				GDL_ERROR_VAL ("sum of nodes of various ranks does not correspond to the size of the taxonomy.",GDL_FAILURE,1);
			}
		}

		// print new line
		printf("\n");

//		for(i=0; i < taxonomy->ntaxon;i++){
//			printf("\n-taxon %d : index = %d , id = %d , name = %s\n", i, taxonomy->taxons[i]->index, taxonomy->taxons[i]->id, taxonomy->taxons[i]->names[0]);
//			if(taxonomy->taxons[i]->parent != NULL){
//				printf("\t-parent taxon : index = %d , id = %d, name = %s\n", taxonomy->taxons[i]->parent->index, taxonomy->taxons[i]->parent->id, taxonomy->taxons[i]->parent->names[0]);
//			}
//			else{
//				printf("\t-root node\n");
//			}
//			printf("\t-number of children = %d :\n",taxonomy->taxons[i]->nchild);
//			for(j = 0 ; j < taxonomy->taxons[i]->nchild; j ++){
//				printf("\t\t-child no %d : index = %d , id = %d, name = %s\n", j, taxonomy->taxons[i]->children[j]->index, taxonomy->taxons[i]->children[j]->id, taxonomy->taxons[i]->children[j]->names[0]);
//			}
//		}


		// free objects
		GDL_FREE(depth_count);
		GDL_FREE(degree_count);
		GDL_FREE(rank_count);
		gdl_string_free(TAXODB);
		mgx_taxonomy_free(taxonomy);

  }

  exit (0);
}

