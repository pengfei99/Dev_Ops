/*
 *  mgx-taxolca.c
 *
 *  $Author: vervieke $, $Date: 2012/05/18 11:33:52 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxo2distancemat";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;
static int only_leaves_flag = 0;
static int taxid_flag = 0;

static gdl_string * TAXODB   = NULL;
static gdl_string * OUTPUT   = NULL;

static struct option long_options[] =
{
		/* These options set a flag. */
		{"help", no_argument,          &help_flag, 1},
		{"verbose", no_argument,       &verbose_flag, 1},
		{"brief",   no_argument,       &verbose_flag, 0},
		{"no-missing",   no_argument,       &no_missing_flag, 1},
		{"taxid",   no_argument,       &taxid_flag, 1},
		{"only_leaves",   no_argument,       &only_leaves_flag, 1},
		/* These options don't set a flag.
      We distinguish them by their indices. */
		{"taxodb",   required_argument, 0, 't'},
		{"output",   required_argument, 0, 'o'},
		{0, 0, 0, 0}
};

static int
parse_argument (int argc, char *argv[])
{
	int c;

	while (1)
	{

		/* getopt_long stores the option index here. */
		int option_index = 0;

		c = getopt_long (argc, argv, "o:t:",
				long_options, &option_index);

		/* Detect the end of the options. */
		if (c == -1)
			break;

		switch (c)
		{
		case 0:
			/* If this option set a flag, do nothing else now. */
			if (long_options[option_index].flag != 0)
				break;
			printf ("option %s", long_options[option_index].name);
			if (optarg)
				printf (" with arg %s", optarg);
			printf ("\n");
			break;
		case 'o':
			OUTPUT = gdl_string_clone (optarg);
			break;
		case 't':
			TAXODB = gdl_string_clone (optarg);
			break;
		case '?':
			GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
		default:
			GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
		}
	}
}

static int
check_argument (void)
{
	if (OUTPUT == 0)
	{
		GDL_ERROR_VAL ("No output file provided",
				GDL_FAILURE,
				1);
	}

	if (TAXODB == 0)
	{
		GDL_ERROR_VAL ("No taxonomy database file provided",
				GDL_FAILURE,
				1);
	}

	return GDL_SUCCESS;
}


static int
help (void)
{
	print_header (PROGRAM);
	printf ("\n");
	printf ("--help\tDisplay a brief help on program usage\n");
	printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
	printf ("--only_leaves\t Compute distance matrix only on taxonomy leaves\n");
	printf ("--taxid\t print taxid in row and columns names (defaut names)\n");
	printf ("\n");
	printf ("--output or -o\tThe output file\n");
	printf ("--taxodb or -t\tThe taxonomy database file\n");
}

int
main (int argc, char *argv[])
{
	int status;

	parse_argument (argc, argv);

	if (help_flag)
	{
		exit (help());
	}

	status = check_argument ();

	if (status == GDL_SUCCESS)
	{
		mgx_taxonomy * taxonomy;
		FILE * stream;
		size_t i, j, ntaxon_to_rm, ntaxon_removed,lca;
		mgx_taxon * taxon_to_rm;

		// read taxonomy
		stream   = gdl_fileopen (TAXODB, "r");
		taxonomy = mgx_taxonomy_fread (stream);
		gdl_fileclose (TAXODB, stream);
		//printf("Taxo read\n");fflush(stdout);

		//Prepare LCA
		mgx_taxonomy_euler_tour(taxonomy);
		mgx_taxonomy_rmq_prepare(taxonomy);

		// open output file
		stream = gdl_fileopen (OUTPUT, "w");

		// print header
			//printf("begin header\n");fflush(stdout);
			//if(only_leaves_flag) printf("Mode Only-Leaves On\n");fflush(stdout);
		for(i=0;i<taxonomy->ntaxon;i++){
			if(only_leaves_flag){
				if(taxonomy->taxons[i]->nchild == 0){
					if(taxid_flag){
						fprintf(stream,"%d\t",taxonomy->taxons[i]->id);
					}else{
						fprintf(stream,"%s\t",taxonomy->taxons[i]->names[0]);
					}
				}
			}
			else{
				if(taxid_flag){
					fprintf(stream,"%d\t",taxonomy->taxons[i]->id);
				}else{
					fprintf(stream,"%s\t",taxonomy->taxons[i]->names[0]);
				}
			}
		}
		fprintf(stream,"\n");
		//printf("end header\n");fflush(stdout);

		// print matrix
		for(i=0;i<taxonomy->ntaxon;i++){
			if(only_leaves_flag){
				if(taxonomy->taxons[i]->nchild == 0){
					//printf("Taxo Id: %s \n",taxonomy->taxons[i]->names[0]);fflush(stdout);
					if(taxid_flag){
						fprintf(stream,"%d\t",taxonomy->taxons[i]->id);
					}else{
						fprintf(stream,"%s\t",taxonomy->taxons[i]->names[0]);
					}
					for(j=0;j<taxonomy->ntaxon;j++){
						if(taxonomy->taxons[j]->nchild == 0 ){
							lca=mgx_taxonomy_lca_pair(taxonomy, i, j);
							fprintf(stream,"%d\t",taxonomy->taxons[i]->depth+taxonomy->taxons[j]->depth-2*taxonomy->taxons[lca]->depth);
						}
					}
					fprintf(stream,"\n");
				}
			}
			else{
				//printf("Taxo Id: %s \n",taxonomy->taxons[i]->names[0]);fflush(stdout);
				if(taxid_flag){
					fprintf(stream,"%d\t",taxonomy->taxons[i]->id);
				}else{
					fprintf(stream,"%s\t",taxonomy->taxons[i]->names[0]);
				}
				for(j=0;j<taxonomy->ntaxon;j++){
					lca=mgx_taxonomy_lca_pair(taxonomy, i, j);
					fprintf(stream,"%d\t",taxonomy->taxons[i]->depth+taxonomy->taxons[j]->depth-2*taxonomy->taxons[lca]->depth);
				}
				fprintf(stream,"\n");
			}

		}

		// close output file
		gdl_fileclose (OUTPUT, stream);

	}

	exit (0);
}

