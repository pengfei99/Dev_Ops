/*
 *  mgx-taxosubset.c
 *
 *  $Author: mahep $, $Date: 2011/09/20 16:03:41 $, $Version$
 *
 *  MixgenomiX : a C package for metagenomics
 *
 *  Copyright (C) 2011  DKL Team, bioMÃ©rieux, France.
 *
 */

#include <getopt.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>
#include <math.h>
#include <ctype.h>

#include <gdl/gdl_common.h>
#include <gdl/gdl_version.h>
#include <gdl/gdl_errno.h>
#include <gdl/gdl_io.h>
#include <gdl/gdl_runtime.h>
#include <gdl/gdl_seq_io.h>
#include <gdl/gdl_list.h>

#include "mixgenomix.h"
#include "gzutil.h"
#include "taxo.h"

#include "header.c"
#include "util.c"

static gdl_string * PROGRAM = "mgx-taxo2dot";

static int help_flag    = 0;
static int verbose_flag = 0;
static int no_missing_flag = 0;
static int taxid_flag = 0;
static int below_flag = 0;

static gdl_string * TAXODBOUT   = NULL;
static gdl_string * TAXODBIN   = NULL;
static gdl_string * TAXONS   = NULL;
static gdl_string * ROOT   = NULL;

static struct option long_options[] =
 {
   /* These options set a flag. */
   {"help", no_argument,          &help_flag, 1},
   {"verbose", no_argument,       &verbose_flag, 1},
   {"brief",   no_argument,       &verbose_flag, 0},
   {"no-missing",   no_argument,       &no_missing_flag, 1},
   {"taxid",   no_argument,       &taxid_flag, 1},
   {"below",   no_argument,       &below_flag, 1},
 /* These options don't set a flag.
      We distinguish them by their indices. */
   {"output",   required_argument, 0, 'o'},
   {"input",   required_argument, 0, 'i'},
   {"root",   required_argument, 0, 'r'},
   {"list",   required_argument, 0, 'l'},
   {0, 0, 0, 0}
 };

static int
parse_argument (int argc, char *argv[])
{
	int c;

   while (1)
     {

       /* getopt_long stores the option index here. */
       int option_index = 0;

       c = getopt_long (argc, argv, "o:i:l:r:",
                        long_options, &option_index);

       /* Detect the end of the options. */
       if (c == -1)
         break;

       switch (c)
         {
         case 0:
           /* If this option set a flag, do nothing else now. */
           if (long_options[option_index].flag != 0)
             break;
           printf ("option %s", long_options[option_index].name);
           if (optarg)
             printf (" with arg %s", optarg);
           printf ("\n");
           break;

         case 'o':
           TAXODBOUT = gdl_string_clone (optarg);
           break;
         case 'i':
           TAXODBIN = gdl_string_clone (optarg);
           break;
         case 'l':
		   TAXONS = gdl_string_clone (optarg);
		   break;
         case 'r':
           ROOT = gdl_string_clone (optarg);
           break;
		 case '?':
           GDL_ERROR_VAL ("Unknown arguments", GDL_EINVAL, -1);
         default:
           GDL_ERROR_VAL ("Bad arguments", GDL_EINVAL, -1);
         }
     }
}

static int
check_argument (void)
{
	if (TAXODBOUT == 0)
	{
		GDL_ERROR_VAL ("No output taxonomy database specified",
					   GDL_FAILURE,
					   1);
	}
	if (TAXODBIN == 0)
	{
		GDL_ERROR_VAL ("No input taxonomy database file provided",
					   GDL_FAILURE,
					   1);
	}
	if (TAXONS == 0 & ROOT == 0)
	{
		GDL_ERROR_VAL ("You must specify a list of taxa and/or a new root to consider",
					   GDL_FAILURE,
					   1);
	}
	return GDL_SUCCESS;
}


static int
help (void)
{
   print_header (PROGRAM);
   printf ("\n");
   printf ("--help\tDisplay a brief help on program usage\n");
   printf ("--verbose\tOutput message on standard output to see what the program is doing\n");
   printf ("\n");
   printf ("--input or -i\tThe input taxonomy file (taxo-db format)");
   printf ("--output or -o\tThe output taxonomy file (taxo-db format)");
   printf ("--list or -l\tThe list of taxons to sample from\n");
   printf ("--taxid Flag specifying list of taxid (default format : names)\n");
   printf ("--below Flag specifying to subsample above and below list of taxa provided (default: above only)\n");
   printf ("--root or -r the root to consider\n");
}



void flag_lower_taxon(mgx_taxonomy *t, size_t index){
	size_t i;
	// flag taxon
	t->taxons[index]->_visited = 1;
	// flag children
	for(i = 0; i < t->taxons[index]->nchild; i++){
		flag_lower_taxon(t, t->taxons[index]->children[i]->index);
	}
}

void flag_upper_taxon(mgx_taxonomy *t, size_t index){
	size_t i;
	// flag taxon
	t->taxons[index]->_visited = 1;
	// flag ancestor
	if(t->taxons[index]->parent != NULL){
		flag_upper_taxon(t, t->taxons[index]->parent->index);
	}
}

int check_root(mgx_taxonomy * t, size_t index, mgx_taxon * root){
	if(t->taxons[index]->parent == root){
		return(1);
	}else{
		if(t->taxons[index]->parent != NULL){
			return( check_root(t, t->taxons[index]->parent->index, root) );
		}else{
			return(0);
		}
	}
}



int
main (int argc, char *argv[])
{
  int status;

  parse_argument (argc, argv);

  if (help_flag)
  {
  	  exit (help());
  }

  status = check_argument ();

  if (status == GDL_SUCCESS)
  {

		mgx_taxonomy * taxonomy, * taxonomy_sample;
        FILE * stream;
        size_t i, j, n, ntaxons, * taxons_old_ind, rank_value;
        gdl_list      * taxons;
        gdl_string * tx;
    	gdl_string    * line = 0;
    	mgx_taxonomy_lookup_index *taxon_index;
        mgx_taxon * tax_tmp1, * tax_tmp2, *tax, *tax_root;
        gdl_list      * taxons_sample;
        gdl_list_itr * itr1, * itr2;

        // read taxonomy
	    stream   = gdl_fileopen (TAXODBIN, "r");
	    taxonomy = mgx_taxonomy_fread (stream);
	    gdl_fileclose (TAXODBIN, stream);

	    if(verbose_flag){
	    	printf("\nTaxonomy succesfully read, summary : \n");
			printf("\t-number of nodes = %d\n", taxonomy->ntaxon);
			printf("\t-maximum depth = %d\n", taxonomy->maxdepth);
			printf("\t-root node ID = %s\n", taxonomy->root->names[0]);
	    }

    	// build hash-table between provided taxons id (names or taxid) and their indices
	    if (taxid_flag){
    		taxon_index = mgx_taxonomy_taxon_lookup_build(taxonomy, "id");
	    }else{
	    	taxon_index = mgx_taxonomy_taxon_lookup_build(taxonomy, "name");
	    }

	    // initialize "visited flag" for taxons
	    for(i = 0 ; i < taxonomy->ntaxon; i++){
	    	taxonomy->taxons[i]->_visited = 0;
	    }

	    // if new-root specified : check validity
	    if(ROOT){
	    	tax_root = mgx_taxonomy_lookup(taxonomy, taxon_index, ROOT);
	    	if(tax_root == 0){
	    		GDL_ERROR_VAL ("new root does not belong to taxonomy !", GDL_FAILURE, 1);
	    	}else{
	    		tax_root->parent = NULL;
	    	}
	    }

		// if list of taxons specified : read and process taxons to consider
	    if(TAXONS){
		    // read list of taxons to subset if specified
	    	stream = gdl_fileopen (TAXONS, "r");
	    	taxons      = gdl_list_alloc (gdl_list_default);
	    	while(gdl_getline (&line, &n, stream)!=-1)
	    	{
	    		i=j=0;
	    		//tx = gdl_string_next_token (line, n, &i, &j);
			tx = gdl_string_clone(line);
	    		//gdl_list_append (taxons, tx, 0);
			gdl_list_push_back (taxons, tx, 0);
			gdl_string_free (line);
	    		line=0;
	    	}
			gdl_fileclose (TAXONS, stream);
			// process taxons
			itr1 = gdl_list_iterator_front (taxons);
			do{
				// check taxon is found
				tax = mgx_taxonomy_lookup(taxonomy, taxon_index, gdl_list_iterator_value (itr1));
				if(tax == 0){
					printf("WARNING : taxon %s not found in taxonomy --> SKIPPING TAXON\n", gdl_list_iterator_value (itr1));
				}else{
					// if new root specified : check taxon below new root
					if(ROOT){
						if( check_root(taxonomy, tax->index, tax_root) == 0){
							GDL_ERROR_VAL ("specified taxon not below new root !", GDL_FAILURE, 1);
						}
					}
					// flag taxons above
    				flag_upper_taxon(taxonomy, tax->index);
	    			// if below flag specified : flag children
	    			if(below_flag){
	    				flag_lower_taxon(taxonomy, tax->index);
	    			}
				}
			}while (gdl_list_iterator_next (itr1));
		// else : process new root
	    }else{
	    	tax_root->_visited = 1;
	    	if(!below_flag){
	    		printf("\n *** WARNING : [below flag not specified] + [new root] + [no list of taxons] --> taxonomy of a single node ! ***\n");
	    	}else{
	    		flag_lower_taxon(taxonomy, tax_root->index);
	    	}
	    }

    	/*  // debug : check list of taxon read
    	if(verbose_flag){
    		printf("\nList of taxons to subset taxonomy from :\n");
    		itr1 = gdl_list_iterator_front (taxons);
    		do{
    			printf("\t-%s\n", gdl_list_iterator_value (itr1));
    		}
    		while (gdl_list_iterator_next (itr1));
    		printf("-->total : %d taxons\n", gdl_list_size(taxons) );
    	}
    	 */


		// add flagged taxons to a list
    	taxons_sample  = gdl_list_alloc (gdl_list_default);
    	for(i = 0 ; i < taxonomy->ntaxon; i++){
    		if(taxonomy->taxons[i]->_visited == 1){
    			//gdl_list_append (taxons_sample, taxonomy->taxons[i], 0);
                        gdl_list_push_back (taxons_sample, taxonomy->taxons[i], 0);
    		}
    	}
	    if(verbose_flag){
	    	printf("--> found %d taxons to keep\n", gdl_list_size(taxons_sample));
	    }

		/*   //debug : check list looks correct
		itr1 = gdl_list_iterator_front (taxons_sample);
		i = 0;
		do{
			tax_tmp1 = (mgx_taxon *) gdl_list_iterator_value(itr1);
			printf("taxon %d : %s\n", i, tax_tmp1->names[0]);
			if(tax_tmp1->parent != NULL){
				printf("\t--> parent = %s\n", tax_tmp1->parent->names[0]);
			}
			i++;
		}while (gdl_list_iterator_next (itr1));
		*/

		// final step : - update children tables (parent link should be ok)
		// 				- store previous indices to reconstruct the "rank" table
	    if(verbose_flag){
	    	printf("\nBuilding new taxonomy...\n");
	    }
    	taxons_old_ind = GDL_CALLOC (size_t *, gdl_list_size(taxons_sample));
		itr1 = gdl_list_iterator_front (taxons_sample);
		i = 0;
		do{
			tax_tmp1 = (mgx_taxon *) gdl_list_iterator_value(itr1);
			taxons_old_ind[i] = tax_tmp1->index;
			tax_tmp1->index = i;
			tax_tmp1->nchild = 0;
			itr2 = gdl_list_iterator_front (taxons_sample);
			do{
				tax_tmp2 = (mgx_taxon *) gdl_list_iterator_value(itr2);
				if(tax_tmp2->parent == tax_tmp1){
					tax_tmp1->children[tax_tmp1->nchild] = tax_tmp2;
					tax_tmp1->nchild++;
				}
			}while (gdl_list_iterator_next (itr2));

			i++;
		}while (gdl_list_iterator_next (itr1));
	    if(verbose_flag){
			printf("--> updating children links done\n");
	    }

		/*   // debug : check
		i = 0;
		itr1 = gdl_list_iterator_front (taxons_sample);
		do{
				tax_tmp1 = (mgx_taxon *) gdl_list_iterator_value(itr1);
				printf("\n-taxon no %d : %s \n", i, tax_tmp1->names[0]);
				printf("\t-index : %d\n", tax_tmp1->index);
				if(tax_tmp1->parent != NULL){
				printf("\t-parent node : %s (index = %d)\n",tax_tmp1->parent->names[0], tax_tmp1->parent->index);
				}else{
					printf("\t-root node\n");
				}
				if(tax_tmp1->nchild > 0){
					printf("\t-children nodes :\n");
					for(j = 0; j < tax_tmp1->nchild; j++){
						printf("\t\t- child no %d : %s (index = %d)\n", j, tax_tmp1->children[j]->names[0], tax_tmp1->children[j]->index);
					}
				}else{
					printf("\t-leaf node\n");
				}
				i++;
		}while (gdl_list_iterator_next (itr1));
		 */


		// create new taxonomy
		ntaxons = gdl_list_size (taxons_sample);
		taxonomy_sample = mgx_taxonomy_alloc (ntaxons);

		// add taxon
		itr1 = gdl_list_iterator_front (taxons_sample);
		i = 0;
		do{
			tax_tmp1 = (mgx_taxon *) gdl_list_iterator_value(itr1);
			taxonomy_sample->taxons[i] = tax_tmp1;
			// check if root
			if(tax_tmp1->parent == NULL){
					taxonomy_sample->root = tax_tmp1;
			}
			i++;
		}while (gdl_list_iterator_next (itr1));
	    if(verbose_flag){
			printf("--> taxa added\n");
	    }

		// create rank structure
		if(taxonomy->ranks){
			taxonomy_sample->ranks = mgx_taxonomy_rank_alloc (taxonomy->ranks->nrank, ntaxons);
			taxonomy_sample->ranks->nrank = taxonomy->ranks->nrank;
			// copy rank names
			for(i = 0; i < taxonomy->ranks->nrank; i++){
				taxonomy_sample->ranks->rank_names[i] = taxonomy->ranks->rank_names[i];
			}
			// specify taxon ranks
			for(i = 0 ; i < ntaxons ; i++){
				taxonomy_sample->ranks->rid2tx[i] = taxonomy->ranks->rid2tx[ taxons_old_ind[i] ];
			}
		}
	    if(verbose_flag){
			printf("--> rank structure created\n");
	    }

		// create taxid2index array
		if(taxonomy->taxid2index){
			taxonomy_sample->taxid2index   = GDL_MALLOC (size_t, taxonomy->n_taxid2index);
			for(i = 0 ; i < taxonomy_sample->ntaxon ; i++){
				taxonomy_sample->taxid2index[  taxonomy_sample->taxons[i]->id ] = i;
			}
		}
		taxonomy_sample->n_taxid2index = taxonomy->n_taxid2index;
	    if(verbose_flag){
	    	printf("--> taxid2index created\n");
	    }

		// update taxons depth
		taxonomy_sample->root->depth = 0;
		mgx_taxonomy_update_depth(taxonomy_sample, taxonomy_sample->root->index);

		// update max-depth of taxonomy
		mgx_taxonomy_max_depth(taxonomy_sample);

		// log message
	    if(verbose_flag){
	    	printf("\nExiting subsetting process :\n");
	    	printf("\t--> final taxonomy size = %d\n", taxonomy_sample->ntaxon);
			printf("\t--> root node ID = %s\n", taxonomy_sample->root->names[0]);
			/*
	    	printf("\t--> remaining nodes : \n");
	    	for(i = 0; i < taxonomy_sample->ntaxon; i++){
	    		printf("\t\t-taxon no %d (index = %d) : %s\n", i, taxonomy_sample->taxons[i]->index, taxonomy_sample->taxons[i]->names[0]);
				printf("\t\t\t- nchildren = %d\n", taxonomy_sample->taxons[i]->nchild);
				for(j = 0; j < taxonomy_sample->taxons[i]->nchild; j++){
					printf("\t\t\t\-child no %d : %s (index=%d)\n", j,taxonomy_sample->taxons[i]->children[j]->names[0],taxonomy_sample->taxons[i]->children[j]->index);
				}
	    	}
		   */
	    }

	    // write subsampled taxo-db
	    stream = gdl_fileopen (TAXODBOUT, "w");
		mgx_taxonomy_fwrite (stream, taxonomy_sample);

		// close output file
		gdl_fileclose (TAXODBOUT, stream);

  }

  exit (0);
}

